<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王立战的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://showcc.github.io/"/>
  <updated>2017-09-23T10:14:13.702Z</updated>
  <id>http://showcc.github.io/</id>
  
  <author>
    <name>Rieko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我与地坛--史铁生</title>
    <link href="http://showcc.github.io/2017/09/23/I%20and%20the%20temple%20of%20earth/"/>
    <id>http://showcc.github.io/2017/09/23/I and the temple of earth/</id>
    <published>2017-09-23T05:26:26.593Z</published>
    <updated>2017-09-23T10:14:13.702Z</updated>
    
    <content type="html"><![CDATA[<hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时间过的真的很快，转眼之间，已经毕业。今天无意间看到这篇文章，依稀记得上学时期<code>史铁生的我与地坛</code>给我的感动。虽然命运对他的不公，让他充满着怨恨，但他从未停止对生命的思考。其实我们周围的人群，每个人都有自己需要面对的命运，而每个人的命运都布满了坎坷，只是呈现出不同的方式而已。生命本来就是不圆满的，生命的意义在于自己的选择和抗争之中，只有勇敢地面对命运的残缺，挑战命运，才能体现出生命的价值。<br><img src="http://ow4d8yam8.bkt.clouddn.com/248905-106.jpg" alt="图0"></p><hr><a id="more"></a><h2 id="原文【我与地坛–史铁生】"><a href="#原文【我与地坛–史铁生】" class="headerlink" title="原文【我与地坛–史铁生】"></a>原文【我与地坛–史铁生】</h2><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在好几篇小说中都提到过一座废弃的古园，实际就是地坛。许多年前旅游业还没有开展，园子荒芜冷落得如同一片野地，很少被人记起。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地坛离我家很近。或者说我家离地坛很近。总之，只好认为这是缘分。地坛在我出生前四百多年就座落在那儿了，而自从我的祖母年轻时带着我父亲来到北京，就一直住在离它不远的地方一五十多年间搬过几次家，可搬来搬去总是在它周围，而且是越搬离它越近了。我常觉得这中间有着宿命的味道：仿佛这古园就是为了等我，而历尽沧桑在那儿等待了四百多年。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它等待我出生，然后又等待我活到最狂妄的年龄上忽地残废了双腿。四百多年里，它一面剥蚀了古殿檐头浮夸的琉璃，淡褪了门壁上炫耀的朱红，坍圮了一段段高墙又散落了玉砌雕栏，祭坛四周的老柏树愈见苍幽，到处的野草荒藤也都茂盛得自在坦荡。这时候想必我是该来了。十五年前的一个下午，我摇着轮椅进入园中，它为一个失魂落魄的人把一切都准备好了。那时，太阳循着亘古不变的路途正越来越大，也越红。在满园弥漫的沉静光芒中，一个人更容易看到时间，并看见自己的身影。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自从那个下午我无意中进了这园子，就再没长久地离开过它。我一下子就理解了它的意图。正如我在一篇小说中所说的：“在人口密聚的城市里，有这样一个宁静的去处，像是上帝的苦心安排。”</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;两条腿残废后的最初几年，我找不到工作，找不到去路，忽然间几乎什么都找不到了，我就摇了轮椅总是到它那儿去，仅为着那儿是可以逃避一个世界的另一个世界。我在那篇小说中写道：“没处可去我便一天到晚耗在这园子里。跟上班下班一样，别人去上班我就摇了轮椅到这儿来。园子无人看管，上下班时间有些抄近路的人们从园中穿过，园子里活跃一阵，过后便沉寂下来。”“园墙在金晃晃的空气中斜切下一溜荫凉，我把轮椅开进去，把椅背放倒，坐着或　是躺着，看书或者想事，撅一杈树枝左右拍打，驱赶那些和我一样不明白为什么要来这世上的小昆虫。”“蜂儿如一朵小雾稳稳地停在半空；蚂蚁摇头晃脑捋着触须，猛然间想透了什么，转身疾行而去；瓢虫爬得不耐烦了，累了祈祷一回便支开翅膀，忽悠一下升空了；树干上留着一只蝉蜕，寂寞如一间空屋；露水在草叶上滚动、聚集，压弯了草叶轰然坠地摔开万道金光。”“满园子都是草木竞相生长弄出的响动，窸窸窣窣窸窸窣窣片刻不息。”这都是真实的记录，园子荒芜但并不衰败。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除去几座殿堂我无法进去，除去那座祭坛我不能上去而只能从各个角度张望它，地坛的每一棵树下我都去过，差不多它的每一米草地上都有过我的车轮印。无论是什么季节，什么天气，什么时间，我都在这园子里呆过。有时候呆一会儿就回家，有时候就呆到满地上都亮起月光。记不清都是在它的哪些角落里了。我一连几小时专心致志地想关于死的事，也以同样的耐心和方式想过我为什么要出生。这样想了好几年，最后事情终于弄明白了：一个人，出生了，这就不再是一个可以辩论的问题，而只是上帝交给他的一个事实；上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个必然会降临的节日。这样想过之后我安心多了，眼前的一切不再那么可怕。比如你起早熬夜准备考试的时候，忽然想起有一个长长的假期在前面等待你，你会不会觉得轻松一点？并且庆幸并且感激这样的安排？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剩下的就是怎样活的问题了，这却不是在某一个瞬间就能完全想透的、不是一次性能够解决的事，怕是活多久就要想它多久了，就像是伴你终生的魔鬼或恋人。所以，十五年了，我还是总得到那古园里去，去它的老树下或荒草边或颓墙旁，去默坐，去呆想，去推开耳边的嘈杂理一理纷乱的思绪，去窥看自己的心魂。十五年中，这古园的形体被不能理解它的人肆意雕琢，幸好有些东西是任谁也不能改变它的。譬如祭坛石门中的落日，寂静的光辉平铺的一刻，地上的每一个坎坷都被映照得灿烂；譬如在园中最为落寞的时间，一群雨燕便出来高歌，把天地都叫喊得苍凉；譬如冬天雪地上孩子的脚印，总让人猜想他们是谁，曾在哪儿做过些什么，然后又都到哪儿去了；譬如那些苍黑的古柏，你忧郁的时候它们镇静地站在那儿，你欣喜的时候它们依然镇静地站在那儿，它们没日没夜地站在那儿从你没有出生一直站到这个世界上又没了你的时候；譬如暴雨骤临园中，激起一阵阵灼烈而清纯的草木和泥土的气味，让人想起无数个夏天的事件；譬如秋风忽至，再有一场早霜，落叶或飘摇歌舞或坦然安卧，满园中播散着熨帖而微苦的味道。味道是最说不清楚的。味道不能写只能闻，要你身临其境去闻才能明了。味道甚至是难于记忆的，只有你又闻到它你才能记起它的全部情感和意蕴。所以我常常要到那园子里去。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我才想到，当年我总是独自跑到地坛去，曾经给母亲出了一个怎样的难题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她不是那种光会疼爱儿子而不懂得理解儿子的母亲。她知道我心里的苦闷，知道不该阻止我出去走走，知道我要是老呆在家里结果会更糟，但她又担心我一个人在那荒僻的园子里整天都想些什么。我那时脾气坏到极点，经常是发了疯一样地离开家，从那园子里回来又中了魔似的什么话都不说。母亲知道有些事不宜问，便犹犹豫豫地想问而终于不敢问，因为她自己心里也没有答案。她料想我不会愿意她跟我一同去，所以她从未这样要求过，她知道得给我一点独处的时间，得有这样一段过程。她只是不知道这过程得要多久，和这过程的尽头究竟是什么。每次我要动身时，她便无言地帮我准备，帮助我上了轮椅车，看着我摇车拐出小院；这以后她会怎样，当年我不曾想过。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一回我摇车出了小院；想起一件什么事又返身回来，看见母亲仍站在原地，还是送我走时的姿势，望着我拐出小院去的那处墙角，对我的回来竟一时没有反应。待她再次送我出门的时候，她说：“出去活动活动，去地坛看看书，我说这挺好。”许多年以后我才渐渐听出，母亲这话实际上是自我安慰，是暗自的祷告，是给我的提示，是恳求与嘱咐。只是在她猝然去世之后，我才有余暇设想。当我不在家里的那些漫长的时间，她是怎样心神不定坐卧难宁，兼着痛苦与惊恐与一个母亲最低限度的祈求。我可以断定，以她的聪慧和坚忍，在那些空落的白天后的黑夜，在那不眠的黑夜后的白天，她思来想去最后准是对自己说：“反正我不能不让他出去，未来的日子是他自己的，如果他真的要在那园子里出了什么事，这苦难也只好我来承担。”在那段日子里–那是好几年长的一段日子，我想我一定使母亲作过了最坏的准备了，但她从来没有对我说过：“你为我想想”。事实上我也真的没为她想过。那时她的儿子，还太年轻，还来不及为母亲想，他被命运击昏了头，一心以为自己是世上最不幸的一个，不知道儿子的不幸在母亲那儿总是要加倍的。她有一个长到二十岁上忽然截瘫了的儿子，这是她唯一的儿子；她情愿截瘫的是自己而不是儿子，可这事无法代替；她想，只要儿子能活下去哪怕自己去死呢也行，可她又确信一个人不能仅仅是活着，儿子得有一条路走向自己的幸福；而这条路呢，没有谁能保证她的儿子终于能找到。——这样一个母亲，注定是活得最苦的母亲。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一次与一个作家朋友聊天，我问他学写作的最初动机是什么？他想了一会说：“为我母亲。为了让她骄傲。”我心里一惊，良久无言。回想自己最初写小说的动机，虽不似这位朋友的那般单纯，但如他一样的愿望我也有，且一经细想，发现这愿望也在全部动机中占了很大比重。这位朋友说：“我的动机太低俗了吧？”我光是摇头，心想低俗并不见得低俗，只怕是这愿望过于天真了。他又说：“我那时真就是想出名，出了名让别人羡慕我母亲。”我想，他比我坦率。我想，他又比我幸福，因为他的母亲还活着。而且我想，他的母亲也比我的母亲运气好，他的母亲没有一个双腿残废的儿子，否则事情就不这么简单。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我的头一篇小说发表的时候，在我的小说第一次获奖的那些日子里，我真是多么希望我的母亲还活着。我便又不能在家里呆了，又整天整天独自跑到地坛去，心里是没头没尾的沉郁和哀怨，走遍整个园子却怎么也想不通：母亲为什么就不能再多活两年？为什么在她儿子就快要碰撞开一条路的时候，她却忽然熬不住了？莫非她来此世上只是为了替儿子担忧，却不该分享我的一点点快乐？她匆匆离我去时才只有四十九呀！有那么一会，我甚至对世界对上帝充满了仇恨和厌恶。后来我在一篇题为“合欢树”的文章中写道：“我坐在小公园安静的树林里，闭上眼睛，想，上帝为什么早早地召母亲回去呢？很久很久，迷迷糊溯的我听见了回答：‘她心里太苦了，上帝看她受不住了，就召她回去。’我似乎得了一点安慰，睁开 眼睛，看见风正从树林里穿过。”小公园，指的也是地坛。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只是到了这时候，纷纭的往事才在我眼前幻现得清晰，母亲的苦难与伟大才在我 心中渗透得深彻。上帝的考虑，也许是对的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;摇着轮椅在园中慢慢走，又是雾罩的清晨，又是骄阳高悬的白昼，我只想着一件事：母亲已经不在了。在老柏树旁停下，在草地上在颓墙边停下，又是处处虫鸣的午后，又是鸟儿归巢的傍晚，我心里只默念着一句话：可是母亲已经不在了。把椅背放倒，躺下，似睡非睡挨到日没，坐起来，心神恍惚，呆呆地直坐到古祭坛上落满黑暗然后再渐渐浮起月光，心里才有点明白，母亲不能再来这园中找我了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;曾有过好多回，我在这园子里呆得太久了，母亲就来找我。她来找我又不想让我发觉，只要见我还好好地在这园子里，她就悄悄转身回去，我看见过几次她的背影。我也看见过几回她四处张望的情景，她视力不好，端着眼镜像在寻找海上的一条船，她没看见我时我已经看见她了，待我看见她也看见我了我就不去看她，过一会我再抬头看她就又看见她缓缓离去的背影。我单是无法知道有多少回她没有找到我。有一回我坐在矮树丛中，树丛很密，我看见她没有找到我；她一个人在园子里走，走过我的身旁，走过我经常呆的一些地方，步履茫然又急迫。我不知道她已经找了多久还要找多久，我不知道为什么我决意不喊她–但这绝不是小时候的捉迷藏，这也许是出于长大了的男孩子的倔强或羞涩？但这倔只留给我痛悔，丝毫也没有骄傲。我真想告诫所有长大了的男孩子，千万不要跟母亲来这套倔强，羞涩就更不必，我已经懂了可我已经来不及了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;儿子想使母亲骄傲，这心情毕竟是太真实了，以致使“想出名”这一声名狼藉的念头也多少改变了一点形象。这是个复杂的问题，且不去管它了罢。随着小说获奖的激动逐日暗淡，我开始相信，至少有一点我是想错了：我用纸笔在报刊上碰撞开的一条路，并不就是母亲盼望我找到的那条路。年年月月我都到这园子里来，年年月月我都要想，母亲盼望我找到的那条路到底是什么。母亲生前没给我留下过什么隽永的哲言，或要我恪守的教诲，只是在她去世之后，她艰难的命运，坚忍的意志和毫不张扬的爱，随光阴流转，在我的印象中愈加鲜明深刻。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一年，十月的风又翻动起安详的落叶，我在园中读书，听见两个散步的老人说：“没想到这园子有这么大。”我放下书，想，这么大一座园子，要在其中找到她的儿子，母亲走过了多少焦灼的路。多年来我头一次意识到，这园中不单是处处都有过我的车辙，有过我的车辙的地方也都有过母亲的脚印。</p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果以一天中的时间来对应四季，当然春天是早晨，夏天是中午，秋天是黄昏，冬天是夜晚。如果以乐器来对应四季，我想春天应该是小号，夏天是定音鼓，秋天是大提琴，冬天是圆号和长笛。要是以这园子里的声响来对应四季呢？那么，春天是祭坛上空漂浮着的鸽子的哨音，夏天是冗长的蝉歌和杨树叶子哗啦啦地对蝉歌的取笑，秋天是古殿檐头的风铃响，冬天是啄木鸟随意而空旷的啄木声。以园中的景物对应四季，春天是一径时而苍白时而黑润的小路，时而明朗时而阴晦的天上摇荡着串串杨花；夏天是一条条耀眼而灼人的石凳，或阴凉而爬满了青苔的石阶，阶下有果皮，阶上有半张被坐皱的报纸；秋天是一座青铜的大钟，在园子的西北角上曾丢弃着一座很大的铜钟，铜钟与这园子一般年纪，浑身挂满绿锈，文字已不清晰；冬天，是林中空地上几只羽毛蓬松的老麻雀。以心绪对应四季呢？春天是卧病的季节，否则人们不易发觉春天的残忍与渴望；夏天，情人们应该在这个季节里失恋，不然就似乎对不起爱情；秋天是从外面买一棵盆花回家的时候，把花搁在阔别了的家中，并且打开窗户把阳光也放进屋里，慢慢回忆慢慢整理一些发过霉的东西；冬天伴着火炉和书，一遍遍坚定不死的决心，写一些并不发出的信。还可以用艺术形式对应四季，这样春天就是一幅画，夏天是一部长篇小说，秋天是一首短歌或诗，冬天是一群雕塑。以梦呢？以梦对应四季呢？春天是树尖上的呼喊，夏天是呼喊中的细雨，秋天是细雨中的土地，冬天是干净的土地上的一只孤零的烟斗。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为这园子，我常感恩于自己的命运。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我甚至就能清楚地看见，一旦有一天我不得不长久地离开它，我会怎样想念它，我会怎样想念它并且梦见它，我会怎样因为不敢想念它而梦也梦不到它。</p><h3 id="四"><a href="#四" class="headerlink" title="四"></a>四</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我想想，十五年中坚持到这园子来的人都是谁呢？好像只剩了我和一对老人。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;十五年前，这对老人还只能算是中年夫妇，我则货真价实还是个青年。他们总是在薄暮时分来园中散步，我不大弄得清他们是从哪边的园门进来，一般来说他们是逆时针绕这园子走。男人个子很高，肩宽腿长，走起路来目不斜视，胯以上直至脖颈挺直不动；他的妻子攀了他一条胳膊走，也不能使他的上身稍有松懈。女人个子却矮，也不算漂亮，我无端地相信她必出身于家道中衰的名门富族；她攀在丈夫胳膊上像个娇弱的孩子，她向四周观望似总含着恐惧，她轻声与丈夫谈话，见有人走近就立刻怯怯地收住话头。我有时因为他们而想起冉阿让与柯赛特，但这想法并不巩固，他们一望即知是老夫老妻。两个人的穿着都算得上考究，但由于时代的演进，他们的服饰又可以称为古朴了。他们和我一样，到这园子里来几乎是风雨无阻，不过他们比我守时。我什么时间都可能来，他们则一定是在暮色初临的时候。刮风时他们穿了米色风衣，下雨时他们打了黑色的雨伞，夏天他们的衬衫是白色的裤子是黑色的或米色的，冬天他们的呢子大衣又都是黑 色的，想必他们只喜欢这三种颜色。他们逆时针绕这园子一周，然后离去。他们走过我身旁时只有男人的脚步响，女人像是贴在高大的丈夫身上跟着漂移。我相信他们一定对我有印象，但是我们没有说过话，我们互相都没有想要接近的表示。十五年中，他们或许注意到一个小伙子进入了中年，我则看着一对令人羡慕的中年情侣不觉中成了两个老人。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;曾有过一个热爱唱歌的小伙子，他也是每天都到这园中来，来唱歌，唱了好多年，后来不见了。他的年纪与我相仿，他多半是早晨来，唱半小时或整整唱一个上午，估计在另外的时间里他还得上班。我们经常在祭坛东侧的小路上相遇，我知道他是到东南角的高墙下去唱歌，他一定猜想我去东北角的树林里做什么。我找到我的地方，抽几口烟，便听见他谨慎地整理歌喉了。他反反复复唱那么几首歌。文化革命没过去的时侯，他唱“蓝蓝的天上白云飘，白云下面马儿跑……”我老也记不住这歌的名字。文革后，他唱《货郎与小姐》中那首最为流传的咏叹调。“卖布–卖布嘞，卖布–卖布嘞！”我记得这开头的一句他唱得很有声势，在早晨清澈的空气中，货郎跑遍园中的每一个角落去恭维小姐。“我交了好运气，我交了好运气，我为幸福唱歌曲……”然后他就一遍一遍地唱，不让货郎的激情稍减。依我听来，他的技术不算精到，在关键的地方常出差错，但他的嗓子是相当不坏的，而且唱一个上午也听不出一点疲惫。太阳也不疲惫，把大树的影子缩小成一团，把疏忽大意的蚯蚓晒干在小路上，将近中午，我们又在祭坛东侧相遇，他看一看我，我看一看他，他往北去，我往南去。日子久了，我感到我们都有结识的愿望，但似乎都不知如何开口，于是互相注视一下终又都移开目光擦身而过；这样的次数一多，便更不知如何开口了。终于有一天——一个丝毫没有特点的日子，我们互相点了一下头。他说：“你好。”我说：“你好。”他说：“回去啦？”我说：“是，你呢？”他说：“我也该回去了。”我们都放慢脚步（其实我是放慢车速），想再多说几句，但仍然是不知从何说起，这样我们就都走过了对方，又都扭转身子面向对方。他说：“那就再见吧。”我说：“好，再见。”便互相笑笑各走各的路了。但是我们没有再见，那以后，园中再没了他的歌声，我才想到，那天他或许是有意与我道别的，也许他考上了哪家专业文文工团或歌舞团了吧？真希望他如他歌里所唱的那样，交了好运气。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有一些人，我还能想起一些常到这园子里来的人。有一个老头，算得一个真正的饮者；他在腰间挂一个扁瓷瓶，瓶里当然装满了酒，常来这园中消磨午后的时光。他在园中四处游逛，如果你不注意你会以为园中有好几个这样的老头，等你看过了他卓尔不群的饮酒情状，你就会相信这是个独一无二的老头。他的衣着过分随便，走路的姿态也不慎重，走上五六十米路便选定一处地方，一只脚踏在石凳上或土埂上或树墩上，解下腰间的酒瓶，解酒瓶的当儿迷起眼睛把一百八十度视角内的景物细细看一遭，然后以迅雷不及掩耳之势倒一大口酒入肚，把酒瓶摇一摇再挂向腰间，平心静气地想一会什么，便走下一个五六十米去。还有一个捕鸟的汉子，那岁月园中人少，鸟却多，他在西北角的树丛中拉一张网，鸟撞在上面，羽毛戗在网眼里便不能自拔。他单等一种过去很多而现非常罕见的鸟，其它的鸟撞在网上他就把它们摘下来放掉，他说已经有好多年没等到那种罕见的鸟，他说他再等一年看看到底还有没有那种鸟，结果他又等了好多年。早晨和傍晚，在这园子里可以看见一个中年女工程师；早晨她从北向南穿过这园子去上班，傍晚她从南向北穿过这园子回家。事实上我并不了解她的职业或者学历，但我以为她必是学理工的知识分子，别样的人很难有她那般的素朴并优雅。当她在园子穿行的时刻，四周的树林也仿佛更加幽静，清淡的日光中竟似有悠远的琴声，比如说是那曲《献给艾丽丝》才好。我没有见过她的丈夫，没有见过那个幸运的男人是什么样子，我想象过却想象不出，后来忽然懂了想象不出才好，那个男人最好不要出现。她走出北门回家去。我竟有点担心，担心她会落入厨房，不过，也许她在厨房里劳作的情景更有另外的美吧，当然不能再是《献给艾丽丝》，是个什么曲子呢？还有一个人，是我的朋友，他是个最有天赋的长跑家，但他被埋没了。他因为在文革中出言不慎而坐了几年牢，出来后好不容易找了个拉板车的工作，样样待遇都不能与别人平等，苦闷极了便练习长跑。那时他总来这园子里跑，我用手表为他计时。他每跑一圈向我招下手，我就记下一个时间。每次他要环绕这园子跑二十圈，大约两万米。他盼望以他的长跑成绩来获得政治上真正的解放，他以为记者的镜头和文字可以帮他做到这一点。第一年他在春节环城赛上跑了第十五名，他看见前十名的照片都挂在了长安街的新闻橱窗里，于是有了信心。第二年他跑了第四名，可是新闻橱窗里只挂了前三名的照片，他没灰心。第三年他跑了第七名、橱窗里挂前六名的照片，他有点怨自已。第四年他跑了第三名，橱窗里却只挂了第一名的照片。第五年他跑了第一名–他几乎绝望了，橱窗里只有一幅环城赛群众场面的照片。那些年我们俩常一起在这园子里呆到天黑，开怀痛骂，骂完沉默著回家，分手时再互相叮嘱：先别去死，再试着活一活看。他已经不跑了，年岁太大了，跑不了那么快了。最后一次参加环城赛，他以三十八岁之龄又得了第一名并破了纪录，有一位专业队的教练对他说：“我要是十年前发现你就好了。”他苦笑一下什么也没说，只在傍晚又来这园中找到我，把这事平静地向我叙说一遍。不见他已有好几年了，他和妻子和儿子住在很远的地方。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些人都不到园子里来了，园子里差不多完全换了一批新人。十五年前的旧人，就剩我和那对老夫老妻了。有那么一段时间，这老夫老妻中的一个也忽然不来，薄暮时分唯男人独自来散步，步态也明显迟缓了许多，我悬心了很久，怕是那女人出了什么事。幸好过了一个冬天那女人又来了，两个人仍是逆时针绕着园子走，一长一短两个身影恰似钟表的两支指针；女人的头发白了许多，但依旧攀着丈夫的胳膊走得像个孩子。“攀”这个字用得不恰当了，或许可以用“搀”吧，不知有没有兼具这两个意思的字。</p><h3 id="五"><a href="#五" class="headerlink" title="五"></a>五</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我也没有忘记一个孩子——一个漂亮而不幸的小姑娘。十五年前的那个下午，我第一次到这园子里来就看见了她，那时她大约三岁，蹲在斋宫西边的小路上捡树上掉落的“小灯笼”。那儿有几棵大梨树，春天开一簇簇细小而稠密的黄花，花落了便结出无数如同三片叶子合抱的小灯笼，小灯笼先是绿色，继尔转白，再变黄，成熟了掉落得满地都是。小灯笼精巧得令人爱惜，成年人也不免捡了一个还要捡一个。小姑娘咿咿呀呀地跟自己说着话，一边捡小灯笼；她的嗓音很好，不是她那个年龄所常有的那般尖细，而是很圆润甚或是厚重，也许是因为那个下午园子里太安静了。我奇怪这么小的孩子怎么一个人跑来这园子里？我问她住在哪儿？她随便指一下，就喊她的哥哥，沿墙根一带的茂草之中便站起一个七八岁的男 孩，朝我望望，看我不像坏人便对他的妹妹说：“我在这儿呢”，又伏下身去，他在捉什么虫子。他捉到螳螂，蚂蚱，知了和蜻蜒，来取悦他的妹妹。有那么两三年，我经常在那几棵大梨树下见到他们，兄妹俩总是在一起玩，玩得和睦融洽，都渐渐长大了些。之后有很多年没见到他们。我想他们都在学校里吧，小姑娘也到了上学的年龄，必是告别了孩提时光，没有很多机会来这儿玩了。这事很正常，没理由太搁在心上，若不是有一年我又在园中见到他们，肯定就会慢慢把他们忘记。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那是个礼拜日的上午。那是个晴朗而令人心碎的上午，时隔多年，我竟发现那个漂亮的小姑娘原来是个弱智的孩子。我摇着车到那几棵大栾树下去，恰又是遍地落满了小灯笼的季节；当时我正为一篇小说的结尾所苦，既不知为什么要给它那样一个结尾，又不知何以忽然不想让它有那样一个结尾，于是从家里跑出来，想依靠着园中的镇静，看看是否应该把那篇小说放弃。我刚刚把车停下，就见前面不远处有几个人在戏耍一个少女，作出怪样子来吓她，又喊又笑地追逐她拦截她，少女在几棵大树间惊惶地东跑西躲，却不松手揪卷在怀里的裙裾，两条腿袒露着也似毫无察觉。我看出少女的智力是有些缺陷，却还没看出她是谁。我正要驱车上前为少女解围，就见远处飞快地骑车来了个小伙子，于是那几个戏耍少女的家伙望风而逃。小伙子把自行车支在少女近旁，怒目望着那几个四散逃窜的家伙，一声不吭喘着粗气。脸色如暴雨前的天空一样一会比一会苍白。这时我认出了他们，小伙子和少女就是当年那对小兄妹。我几乎是在心里惊叫了一声，或者是哀号。世上的事常常使上帝的居心变得可疑。小伙子向他的妹妹走去。少女松开了手，裙裾随之垂落了下来，很多很多她捡的小灯笼便洒落了一地，铺散在她脚下。她仍然算得漂亮，但双眸迟滞没有光彩。她呆呆地望那群跑散的家伙，望着极目之处的空寂，凭她的智力绝不可能把这个世界想明白吧？大树下，破碎的阳光星星点点，风把遍地的小灯笼吹得滚动，仿佛暗哑地响着无数小铃铛。哥哥把妹妹扶上自行车后座， 带着她无言地回家去了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无言是对的。要是上帝把漂亮和弱智这两样东西都给了这个小姑娘，就只有无言和回家去是对的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;谁又能把这世界想个明白呢？世上的很多事是不堪说的。你可以抱怨上帝何以要降诸多苦难给这人间，你也可以为消灭种种苦难而奋斗，并为此享有崇高与骄傲，但只要你再多想一步你就会坠入深深的迷茫了：假如世界上没有了苦难，世界还能够存在么？要是没有愚钝，机智还有什么光荣呢？要是没了丑陋，漂亮又怎么维系自己的幸运？要是没有了恶劣和卑下，善良与高尚又将如何界定自己又如何成为美德呢？要是没有了残疾，健全会否因其司空见惯而变得腻烦和乏味呢？我常梦想着在人间彻底消灭残疾，但可以相信，那时将由患病者代替残疾人去承担同样的苦难。如果能够把疾病也全数消灭，那么这份苦难又将由（比如说）像貌丑陋的人去承担了。就算我们连丑陋，连愚昧和卑鄙和一切我们所不喜欢的事物和行为，也都可以统统消灭掉，所有的人都一味健康、漂亮、聪慧、高尚，结果会怎样呢？ 怕是人间的剧目就全要收场了，一个失去差别的世界将是一条死水，是一块没有感觉 没有肥力的沙漠。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看来差别永远是要有的。看来就只好接受苦难——人类的全部剧目需要它，存在的本身需要它。看来上帝又一次对了。<br>于是就有一个最令人绝望的结论等在这里：由谁去充任那些苦难的角色？又有谁去体现这世间的幸福，骄傲和快乐？只好听凭偶然，是没有道理好讲的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就命运而言，休论公道。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么，一切不幸命运的救赎之路在哪里呢？设若智慧的悟性可以引领我们去找到救赎之路，难道所有的人都能够获得这样的智慧和悟性吗？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我常以为是丑女造就了美人。我常以为是愚氓举出了智者。我常以为是懦夫衬照了英雄。我常以为是众生度化了佛祖。</p><h3 id="六"><a href="#六" class="headerlink" title="六"></a>六</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设若有一位园神，他一定早已注意到了，这么多年我在这园里坐着，有时候是轻松快乐的，有时候是沉郁苦闷的，有时候优哉游哉，有时候栖惶落寞，有时候平静而且自信，有时候又软弱，又迷茫。其实总共只有三个问题交替着来骚扰我，来陪伴我。第一个是要不要去死？第二个是为什么活？第三个，我干嘛要写作？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我看看，它们迄今都是怎样编织在一起的吧。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你说，你看穿了死是一件无需乎着急去做的事，是一件无论怎样耽搁也不会错过的事，便决定活下去试试？是的，至少这是很关健的因素。为什么要活下去试试呢？好像仅仅是因为不甘心，机会难得，不试白不试，腿反正是完了，一切仿佛都要完了，但死神很守信用，试一试不会额外再有什么损失。说不定倒有额外的好处呢是不是？我说过，这一来我轻松多了，自由多了。为什么要写作呢？作家是两个被人看重的字，这谁都知道。为了让那个躲在园子深处坐轮椅的人，有朝一日在别人眼里也稍微有点光彩，在众人眼里也能有个位置，哪怕那时再去死呢也就多少说得过去了，开始的时候就是这样想，这不用保密，这些已经不用保密了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我带着本子和笔，到园中找一个最不为人打扰的角落，偷偷地写。那个爱唱歌的小伙子在不远的地方一直唱。要是有人走过来，我就把本子合上把笔叼在嘴里。我怕写不成反落得尴尬。我很要面子。可是你写成了，而且发表了。人家说我写的还不坏，他们甚至说：真没想到你写得这么好。我心说你们没想到的事还多着呢。我确实有整整一宿高兴得没合眼。我很想让那个唱歌的小伙子知道，因为他的歌也毕竟是唱得不错。我告诉我的长跑家朋友的时候，那个中年女工程师正优雅地在园中穿行；长跑家很激动，他说好吧，我玩命跑．你玩命写。这一来你中了魔了，整天都在想哪一件事可以写，哪一个人可以让你写成小说。是中了魔了，我走到哪儿想到哪儿，在人山人海里只寻找小说，要是有一种小说试剂就好了，见人就滴两滴看他是不是一篇小说，要是有一种小说显影液就好了，把它泼满全世界看看都是哪儿有小说，中了魔了，那时我完全是为了写作活着。结果你又发表了几篇，并且出了一点小名，可这时你越来越感到恐慌。我忽然觉得自己活得像个人质，刚刚有点像个人了却又过了头，像个人质，被一个什么阴谋抓了来当人质，不定哪天被处决，不定哪天就完蛋。你担心要不了多久你就会文思枯竭，那样你就又完了。凭什么我总能写出小说来呢？凭什么那些适合作小说的生活素材就总能送到一个截瘫者跟前来呢？人家满世界跑都有枯竭的危险，而我坐在这园子里凭什么可以一篇接一篇地写呢？你又想到死了。我想见好就收吧。当一名人质实在是太累了太紧张了，太朝不保夕了。我为写作而活下来，要是写作到底不是我应该干的事，我想我再活下去是不是太冒傻气了？你这么想着你却还在绞尽脑汁地想写。我好歹又拧出点水来，从一条快要晒干的毛巾上。恐慌日甚一日，随时可能完蛋的感觉比完蛋本身可怕多了，所谓怕贼偷就怕贼惦记，我想人不如死了好，不如不出生的好，不如压根儿没有这个世 界的好。可你并没有去死。我又想到那是一件不必着急的事。可是不必着急的事并不证明是一件必要拖延的事呀？你总是决定活下来，这说明什么？是的，我还是想活。人为什么活着？因为人想活着，说到底是这么回事，人真正的名字叫作：欲望。可我不怕死，有时候我真的不怕死。有时候，——说对了。不怕死和想去死是两回事，有时候不怕死的人是有 的，一生下来就不怕死的人是没有的。我有时候倒是 怕活。可是怕活不等于不想活呀？可我为什么还想活呢？因为你还想得到点什么、你觉得你还是可以得到点什么的，比如说爱情，比如说，价值之类，人真正的名字叫欲望。这不对吗？我不该得到点什么吗？没说不该。可我为什么活得恐慌，就像个人质？后来你明白了，你明白你错了，活着不是为了写作，而写作是为了活着。你明白了这一点是在一个挺滑稽的时刻。那天你又说你不如死了好，你的一个朋友劝你：你不能死，你还得写呢，还有好多好作品等着你去写呢。这时候你忽然明白了，你说：只是因为我活着，我才不得不写作。或者说只是因为你还想活下去，你才不得不写作。是的，这样说过之后我竟然不那么恐慌了。就像你看穿了死之后所得的那份轻松？一个人质报复一场阴谋的最有效的办法是把自己杀死。我看出我得先把我杀死在市场上，那样我就不用参加抢购题材的风潮了。你还写吗？还写。你真的不得不写吗？人都忍不住要为生存找一些牢靠的理由。你不担心你会枯竭了？我不知道，不过我想，活着的问题在死前是完不了的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这下好了，您不再恐谎了不再是个人质了，您自由了。算了吧你，我怎么可能自由呢？别忘了人真正的名字是：欲望。所以您得知道，消灭恐慌的最有效的办法就是消灭欲望。可是我还知道，消灭人性的最有效的办法也是消灭欲望。那么，是消灭欲望同时也消灭恐慌呢？还是保留欲望同时也保留人生？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在这园子里坐着，我听见园神告诉我，每一个有激情的演员都难免是一个人质。每一个懂得欣赏的观众都巧妙地粉碎了一场阴谋。每一个乏味的演员都是因为他老以为这戏剧与自己无关。每一个倒霉的观众都是因为他总是坐得离舞台太近了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我在这园子里坐着，园神成年累月地对我说：孩子，这不是别的，这是你的罪孽和福祉。</p><h3 id="七"><a href="#七" class="headerlink" title="七"></a>七</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要是有些事我没说，地坛，你别以为是我忘了，我什么也没忘，但是有些事只适合收藏。不能说，也不能想，却又不能忘。它们不能变成语言，它们无法变成语言，一旦变成语言就不再是它们了。它们是一片朦胧的温馨与寂寥，是一片成熟的希望与绝望，它们的领地只有两处：心与坟墓。比如说邮票，有些是用于寄信的，有些仅仅是为了收藏。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如今我摇着车在这园子里慢慢走，常常有一种感觉，觉得我一个人跑出来已经玩得太久了。有一天我整理我的旧像册，一张十几年前我在这园子里照的照片——那个年轻人坐在轮椅上，背后是一棵老柏树，再远处就是那座古祭坛。我便到园子里去找那棵树。我按着照片上的背景找很快就找到了它，按着照片上它枝干的形状找，肯定那就是它。但是它已经死了，而且在它身上缠绕着一条碗口粗的藤萝。有一天我在这园子碰见一个老太太，她说：“哟，你还在这儿哪？”她问我：“你母亲还好吗？”“您是谁？”“你不记得我，我可记得你。有一回你母亲来这儿找你，她问我您看没看见一个摇轮椅的孩子？……”我忽然觉得，我一个人跑到这世界上来真是玩得太久了。有一天夜晚，我独自坐在祭坛边的路灯下看书，忽然从那漆黑的祭坛里传出一阵阵唢呐声；四周都是参天古树，方形祭坛占地几百平米空旷坦荡独对苍天，我看不见那个吹唢呐的人，唯唢呐声在星光寥寥的夜空里低吟高唱，时而悲怆时而欢快，时面缠绵时而苍凉，或许这几个词都不足以形容它，我清清醒醒地听出它响在过去，一直在响，回旋飘转亘古不散。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;必有一天，我会听见喊我回去。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那时您可以想象一个孩子，他玩累了可他还没玩够呢。心里好些新奇的念头甚至等不及到明天。也可以想象是一个老人，无可质疑地走向他的安息地，走得任劳任怨。还可以想象一对热恋中的情人，互相一次次说“我一刻也不想离开你”，又互相一次次说“时间已经不早了”，时间不早了可我一刻刻也不想离开你，一刻也不想离开你可时间毕竟是不早了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我说不好我想不想回去。我说不好是想还是不想，还是无所谓。我说不好我是像那个孩子，还是像那个老人，还是像一个热恋中的情人。很可能是这样：我同时是他们三个。我来的时候是个孩子，他有那么多孩子气的念头所以才哭着喊着闹着要来，他一来一见到这个世界便立刻成了不要命的情人，而对一个情人来说，不管多么漫长的时光也是稍纵即逝，那时他便明白，每一步每一步，其实一步步都是走在回去的路上。当牵牛花初开的时节，葬礼的号角就已吹响。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是太阳，他每时每刻都是夕阳也都是旭日。当他熄灭着走下山去收尽苍凉残照之际，正是他在另一面燃烧着爬上山巅布散烈烈朝辉之时。那一天，我也将沉静着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然，那不是我。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，那不是我吗？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;宇宙以其不息的欲望将一个歌舞炼为永恒。这欲望有怎样一个人间的姓名，大可忽略不计。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;时间过的真的很快，转眼之间，已经毕业。今天无意间看到这篇文章，依稀记得上学时期&lt;code&gt;史铁生的我与地坛&lt;/code&gt;给我的感动。虽然命运对他的不公，让他充满着怨恨，但他从未停止对生命的思考。其实我们周围的人群，每个人都有自己需要面对的命运，而每个人的命运都布满了坎坷，只是呈现出不同的方式而已。生命本来就是不圆满的，生命的意义在于自己的选择和抗争之中，只有勇敢地面对命运的残缺，挑战命运，才能体现出生命的价值。&lt;br&gt;&lt;img src=&quot;http://ow4d8yam8.bkt.clouddn.com/248905-106.jpg&quot; alt=&quot;图0&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://showcc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="抒情散文" scheme="http://showcc.github.io/tags/%E6%8A%92%E6%83%85%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>$.ajax()方法详解</title>
    <link href="http://showcc.github.io/2017/09/11/ajax/"/>
    <id>http://showcc.github.io/2017/09/11/ajax/</id>
    <published>2017-09-10T16:03:36.252Z</published>
    <updated>2017-09-10T16:30:46.881Z</updated>
    
    <content type="html"><![CDATA[<p>jquery中的ajax方法参数总是记不住，这里记录一下。<br><img src="https://show8.github.io/blogimage/ajax.jpg" alt="图1"><br><a id="more"></a></p><h3 id="1-url"><a href="#1-url" class="headerlink" title="1.url:"></a>1.url:</h3><p>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</p><h3 id="2-type"><a href="#2-type" class="headerlink" title="2.type:"></a>2.type:</h3><p>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p><h3 id="3-timeout"><a href="#3-timeout" class="headerlink" title="3.timeout:"></a>3.timeout:</h3><p>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</p><h3 id="4-async"><a href="#4-async" class="headerlink" title="4.async:"></a>4.async:</h3><p>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</p><h3 id="5-cache"><a href="#5-cache" class="headerlink" title="5.cache:"></a>5.cache:</h3><p>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p><h3 id="6-data"><a href="#6-data" class="headerlink" title="6.data:"></a>6.data:</h3><p>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。</p><h3 id="7-dataType"><a href="#7-dataType" class="headerlink" title="7.dataType:"></a>7.dataType:</h3><p>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p><h3 id="8-beforeSend："><a href="#8-beforeSend：" class="headerlink" title="8.beforeSend："></a>8.beforeSend：</h3><p>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>;   <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="9-complete："><a href="#9-complete：" class="headerlink" title="9.complete："></a>9.complete：</h3><p>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>;    <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="10-success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。"><a href="#10-success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。" class="headerlink" title="10.success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。"></a>10.success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。</h3><pre><code>(1)由服务器返回，并根据dataType参数进行处理后的数据。(2)描述状态的字符串。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus</span>)</span>&#123;</div><div class="line">   <span class="comment">//data可能是xmlDoc、jsonObj、html、text等等</span></div><div class="line">   <span class="keyword">this</span>;  <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="11-error"><a href="#11-error" class="headerlink" title="11.error:"></a>11.error:</h3><p>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>)</span>&#123;</div><div class="line">   <span class="comment">//通常情况下textStatus和errorThrown只有其中一个包含信息</span></div><div class="line">   <span class="keyword">this</span>;   <span class="comment">//调用本次ajax请求时传递的options参数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="12-contentType："><a href="#12-contentType：" class="headerlink" title="12.contentType："></a>12.contentType：</h3><p>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。</p><h3 id="13-dataFilter："><a href="#13-dataFilter：" class="headerlink" title="13.dataFilter："></a>13.dataFilter：</h3><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>)</span>&#123;</div><div class="line">    <span class="comment">//返回处理后的数据</span></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="14-dataFilter："><a href="#14-dataFilter：" class="headerlink" title="14.dataFilter："></a>14.dataFilter：</h3><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>)</span>&#123;</div><div class="line">    <span class="comment">//返回处理后的数据</span></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="15-global："><a href="#15-global：" class="headerlink" title="15.global："></a>15.global：</h3><p>要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。</p><h3 id="16-ifModified："><a href="#16-ifModified：" class="headerlink" title="16.ifModified："></a>16.ifModified：</h3><p>要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。</p><h3 id="17-jsonp："><a href="#17-jsonp：" class="headerlink" title="17.jsonp："></a>17.jsonp：</h3><p>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。</p><h3 id="18-username："><a href="#18-username：" class="headerlink" title="18.username："></a>18.username：</h3><p>要求为String类型的参数，用于响应HTTP访问认证请求的用户名。</p><h3 id="19-password："><a href="#19-password：" class="headerlink" title="19.password："></a>19.password：</h3><p>要求为String类型的参数，用于响应HTTP访问认证请求的密码。</p><h3 id="20-processData："><a href="#20-processData：" class="headerlink" title="20.processData："></a>20.processData：</h3><p>要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。</p><h3 id="21-scriptCharset："><a href="#21-scriptCharset：" class="headerlink" title="21.scriptCharset："></a>21.scriptCharset：</h3><p>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</p><p>案例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#send'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         $.ajax(&#123;</div><div class="line">             type: <span class="string">"GET"</span>,</div><div class="line">             url: <span class="string">"test.json"</span>,</div><div class="line">             data: &#123;<span class="attr">username</span>:$(<span class="string">"#username"</span>).val(), <span class="attr">content</span>:$(<span class="string">"#content"</span>).val()&#125;,</div><div class="line">             dataType: <span class="string">"json"</span>,</div><div class="line">             success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                         $(<span class="string">'#resText'</span>).empty();   <span class="comment">//清空resText里面的所有内容</span></div><div class="line">                         <span class="keyword">var</span> html = <span class="string">''</span>; </div><div class="line">                         $.each(data, <span class="function"><span class="keyword">function</span>(<span class="params">commentIndex, comment</span>)</span>&#123;</div><div class="line">                               html += <span class="string">'&lt;div class="comment"&gt;&lt;h6&gt;'</span> + comment[<span class="string">'username'</span>]</div><div class="line">                                         + <span class="string">':&lt;/h6&gt;&lt;p class="para"'</span> + comment[<span class="string">'content'</span>]</div><div class="line">                                         + <span class="string">'&lt;/p&gt;&lt;/div&gt;'</span>;</div><div class="line">                         &#125;);</div><div class="line">                         $(<span class="string">'#resText'</span>).html(html);</div><div class="line">                      &#125;</div><div class="line">         &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jquery中的ajax方法参数总是记不住，这里记录一下。&lt;br&gt;&lt;img src=&quot;https://show8.github.io/blogimage/ajax.jpg&quot; alt=&quot;图1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ajax" scheme="http://showcc.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>cookie 和session 的区别详解</title>
    <link href="http://showcc.github.io/2017/09/10/cookie%20and%20session/"/>
    <id>http://showcc.github.io/2017/09/10/cookie and session/</id>
    <published>2017-09-10T15:42:58.076Z</published>
    <updated>2017-09-10T16:30:13.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二者的定义"><a href="#二者的定义" class="headerlink" title="二者的定义:"></a>二者的定义:</h3><p><img src="https://show8.github.io/blogimage/cookie.jpg" alt="图1"><br><a id="more"></a><br>当你在浏览网站的时候，WEB服务器会先送一小小资料放在你的计算机上，Cookie会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。</p><p>具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择。</p><p>cookie机制。正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p><p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</p><p>session机制。session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id）,如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p><p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。比如： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"testform"</span> <span class="attr">action</span>=<span class="string">"/xxx"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"jsessionid"</span> <span class="attr">value</span>=<span class="string">"ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>实际上这种技术可以简单的用对action应用URL重写来代替。<br>cookie 和session 的区别：</p><pre><code>1. cookie数据存放在客户的浏览器上，session数据放在服务器上。2. cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。3. session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用COOKIE。4. 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。5. 所以个人建议：   将登陆信息等重要信息存放为SESSION   其他信息如果需要保留，可以放在COOKIE中</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;二者的定义&quot;&gt;&lt;a href=&quot;#二者的定义&quot; class=&quot;headerlink&quot; title=&quot;二者的定义:&quot;&gt;&lt;/a&gt;二者的定义:&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://show8.github.io/blogimage/cookie.jpg&quot; alt=&quot;图1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="cookie" scheme="http://showcc.github.io/tags/cookie/"/>
    
      <category term="session" scheme="http://showcc.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>前端工程</title>
    <link href="http://showcc.github.io/2017/07/21/Front-end%20engineering/"/>
    <id>http://showcc.github.io/2017/07/21/Front-end engineering/</id>
    <published>2017-07-21T09:48:24.592Z</published>
    <updated>2017-09-23T10:10:07.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端工程——基础篇"><a href="#前端工程——基础篇" class="headerlink" title="前端工程——基础篇"></a>前端工程——基础篇</h1><hr><p>喂喂喂，那个切图的，把页面写好就发给研发工程师套模板吧。<br>你好，切图仔。<br><img src="https://show8.github.io/blogimage/9-11.jpg" alt="图0"><br><a id="more"></a><br>不知道你的团队如何定义前端开发，据我所知，时至今日仍然有很多团队会把前端开发归类为产品或者设计岗位，虽然身份之争多少有些无谓，但我对这种偏见还是心存芥蒂，酝酿了许久，决定写一个系列的文章，试着从工程的角度系统的介绍一下我对前端，尤其是Web前端的理解。</p><p>只要我们还把自己的工作看作为一项软件开发活动，那么我相信读过下面的内容你也一定会有所共鸣。</p><h1 id="前端，是一种GUI软件"><a href="#前端，是一种GUI软件" class="headerlink" title="前端，是一种GUI软件"></a>前端，是一种GUI软件</h1><hr><p>现如今前端可谓包罗万象，产品形态五花八门，涉猎极广，什么高大上的基础库/框架，拽炫酷的宣传页面，还有屌炸天的小游戏……不过这些一两个文件的小项目并非是前端技术的主要应用场景，更具商业价值的则是复杂的Web应用，它们功能完善，界面繁多，为用户提供了完整的产品体验，可能是新闻聚合网站，可能是在线购物平台，可能是社交网络，可能是金融信贷应用，可能是音乐互动社区，也可能是视频上传与分享平台……<br><code>从本质上讲，所有Web应用都是一种运行在网页浏览器中的软件，这些软件的图形用户界面（Graphical User Interface，简称GUI）即为前端。</code><br>如此复杂的Web应用，动辄几十上百人共同开发维护，其前端界面通常也颇具规模，工程量不亚于一般的传统GUI软件：</p><p><img src="https://show8.github.io/blogimage/G1.png" alt="图1"></p><p>尽管Web应用的复杂程度与日俱增，用户对其前端界面也提出了更高的要求，但时至今日仍然没有多少前端开发者会从软件工程的角度去思考前端开发，来助力团队的开发效率，更有甚者还对前端保留着”如玩具般简单“的刻板印象，日复一日，刀耕火种。</p><p>历史悠久的前端开发，始终像是放养的野孩子，原始如斯，不免让人慨叹！</p><h1 id="前端工程的三个阶段"><a href="#前端工程的三个阶段" class="headerlink" title="前端工程的三个阶段"></a>前端工程的三个阶段</h1><hr><p>现在的前端开发倒也并非一无所有，回顾一下曾经经历过或听闻过的项目，为了提升其前端开发效率和运行性能，前端团队的工程建设大致会经历三个阶段：</p><h3 id="第一阶段：库-框架选型"><a href="#第一阶段：库-框架选型" class="headerlink" title="第一阶段：库/框架选型"></a>第一阶段：库/框架选型</h3><p><img src="https://show8.github.io/blogimage/G2.png" alt="图2"></p><p>前端工程建设的第一项任务就是根据项目特征进行技术选型。</p><p>基本上现在没有人完全从0开始做网站，哪怕是政府项目用个jquery都很正常吧，React/Angularjs等框架横空出世，解放了不少生产力，合理的技术选型可以为项目节省许多工程量这点毋庸置疑。</p><h3 id="第二阶段：简单构建优化"><a href="#第二阶段：简单构建优化" class="headerlink" title="第二阶段：简单构建优化"></a>第二阶段：简单构建优化</h3><p><img src="https://show8.github.io/blogimage/G3.png" alt="图3"></p><p>选型之后基本上就可以开始敲码了，不过光解决开发效率还不够，必须要兼顾运行性能。前端工程进行到第二阶段会选型一种构建工具，对代码进行压缩，校验，之后再以页面为单位进行简单的资源合并。</p><p>前端开发工程化程度之低，常常出乎我的意料，我之前在百度工作时是没有多少概念的，直到离开大公司的温室，去到业界与更多的团队交流才发现，能做到这个阶段在业界来说已然超出平均水平，属于“具备较高工程化程度”的团队了，查看网上形形色色的网页源代码，能做到最基本的JS/CSS压缩的Web应用都已跨入标准互联网公司行列，不难理解为什么很多前端团队对于前端工程构建的认知还仅停留在“压缩、校验、合并”这种程度。</p><h3 id="第三阶段：JS-CSS模块化开发"><a href="#第三阶段：JS-CSS模块化开发" class="headerlink" title="第三阶段：JS/CSS模块化开发"></a>第三阶段：JS/CSS模块化开发</h3><p><img src="https://show8.github.io/blogimage/G4.png" alt="图4"></p><p>分而治之是软件工程中的重要思想，是复杂系统开发和维护的基石，这点放在前端开发中同样适用。在解决了基本开发效率运行效率问题之后，前端团队开始思考维护效率，模块化是目前前端最流行的分治手段。<br>`<br>很多人觉得模块化开发的工程意义是复用，我不太认可这种看法，在我看来，模块化开发的最大价值应该是分治，是分治，分治！（重说三）。</p><p>不管你将来是否要复用某段代码，你都有充分的理由将其分治为一个模块。<br>`<br>JS模块化方案很多，AMD/CommonJS/UMD/ES6 Module等，对应的框架和工具也一大堆，说起来很烦，大家自行百度吧；CSS模块化开发基本都是在less、sass、stylus等预处理器的import/mixin特性支持下实现的。</p><p>虽然这些技术由来已久，在如今这个“言必及React”的时代略显落伍，但想想业界的绝大多数团队的工程化落后程度，放眼望去，毫不夸张的说，能达到第三阶段的前端团队已属于高端行列，基本具备了开发维护一般规模Web应用的能力。</p><p>然而，做到这些就够了么？Naive！</p><h3 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h3><p><code>前端是一种技术问题较少、工程问题较多的软件开发领域。</code><br>当我们要开发一款完整的Web应用时，前端将面临更多的工程问题，比如：</p><ul><li>大体量：多功能、多页面、多状态、多系统；</li><li>大规模：多人甚至多团队合作开发；</li><li>高性能：CDN部署、缓存控制、文件指纹、缓存复用、请求合并、按需加载、同步/异步加载、移动端首屏CSS内嵌、HTTP 2.0服务端资源推送。</li></ul><p><code>扩展阅读：大公司里怎样开发和部署前端代码？</code><br>这些无疑是一系列严肃的系统工程问题。</p><p>前面讲的三个阶段虽然相比曾经“茹毛饮血”的时代进步不少，但用于支撑第四阶段的多人合作开发以及精细的性能优化似乎还欠缺点什么。</p><p>到底，缺什么呢？</p><h4 id="没有银弹"><a href="#没有银弹" class="headerlink" title="没有银弹"></a>没有银弹</h4><p>读过<a href="https://book.douban.com/subject/2230248/" target="_blank" rel="external">《人月神话》</a>的人应该都听说过，软件工程 <a href="https://baike.baidu.com/item/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9" target="_blank" rel="external">没有银弹</a>。没错，前端开发同样没有银弹，可是现在是连™铅弹都没有的年月！（刚有了BB弹，摔）</p><p>前端历来以“简单”著称，在前端开发者群体中，小而美的价值观占据着主要的话语权，甚至成为了某种信仰，想与其他人交流一下工程方面的心得，得到的回应往往都是两个字：太重。<br><code>重你妹！你的脑容量只有4K吗？</code><br>工程方案其实也可以小而美！只不过它的小而美不是指代码量，而是指“规则”。找到问题的根源，用最少最简单明了的规则制定出最容易遵守最容易理解的开发规范或工具，以提升开发效率和工程质量，这同样是小而美的典范！</p><p>2011年我有幸参与到 FIS 项目中，与百度众多大中型项目的前端研发团队共同合作，不断探索实践前端开发的工程化解决方案，13年离开百度去往UC，面对完全不同的产品形态，不同的业务场景，不同的适配终端，甚至不同的网络环境，过往的方法论仍然能够快速落地，为多个团队的不同业务场景量身定制出合理的前端解决方案。</p><p>这些经历让我明悟了一个道理：<br><code>进入第四阶段，我们只需做好两件事就能大幅提升前端开发效率，并且兼顾运行性能，那就是——组件化开发与资源管理。</code></p><h4 id="第一件事：组件化开发"><a href="#第一件事：组件化开发" class="headerlink" title="第一件事：组件化开发"></a>第一件事：组件化开发</h4><p>分治的确是非常重要的工程优化手段。在我看来，前端作为一种GUI软件，光有JS/CSS的模块化还不够，对于UI组件的分治也有着同样迫切的需求：</p><p><img src="https://show8.github.io/blogimage/G5.png" alt="图5"></p><p>如上图，这是我所信仰的前端组件化开发理念，简单解读一下：</p><ol><li>页面上的每个 独立的 可视/可交互区域视为一个组件；</li><li>每个组件对应一个工程目录，组件所需的各种资源都在这个目录下就近维护；</li><li>由于组件具有独立性，因此组件与组件之间可以 自由组合；</li><li>页面只不过是组件的容器，负责组合组件形成功能完整的界面；</li><li>当不需要某个组件，或者想要替换组件时，可以整个目录删除/替换。</li></ol><p>其中第二项描述的就近维护原则，是我觉得最具工程价值的地方，它为前端开发提供了很好的分治策略，每个开发者都将清楚的知道，自己所开发维护的功能单元，其代码必然存在于对应的组件目录中，在那个目录下能找到有关这个功能单元的所有内部逻辑，样式也好，JS也好，页面结构也好，都在那里。</p><p>组件化开发具有较高的通用性，无论是前端渲染的单页面应用，还是后端模板渲染的多页面应用，组件化开发的概念都能适用。组件HTML部分根据业务选型的不同，可以是静态的HTML文件，可以是前端模板，也可以是后端模板：</p><p><img src="https://show8.github.io/blogimage/G6.png" alt="图6"></p><p><code>不同的技术选型决定了不同的组件封装和调用策略。</code><br>基于这样的工程理念，我们很容易将系统以独立的组件为单元进行分工划分：</p><p><img src="https://show8.github.io/blogimage/G7.png" alt="图7"></p><p>由于系统功能被分治到独立的模块或组件中，粒度比较精细，组织形式松散，开发者之间不会产生开发时序的依赖，大幅提升并行的开发效率，理论上允许随时加入新成员认领组件开发或维护工作，也更容易支持多个团队共同维护一个大型站点的开发。</p><p>结合前面提到的模块化开发，整个前端项目可以划分为这么几种开发概念：</p><p><img src="https://show8.github.io/blogimage/G8.png" alt="图8"></p><p>以上5种开发概念以相对较少的规则组成了前端开发的基本工程结构，基于这些理念，我眼中的前端开发就成了这个样子：</p><p><img src="https://show8.github.io/blogimage/G9.png" alt="图9"><br><img src="https://show8.github.io/blogimage/G10.png" alt="图10"><br><img src="https://show8.github.io/blogimage/G11.png" alt="图11"><br><img src="https://show8.github.io/blogimage/G12.png" alt="图12"></p><p>综合上面的描述，对于一般中小规模的项目，大致可以规划出这样的源码目录结构：</p><p><img src="https://show8.github.io/blogimage/G13.png" alt="图13"></p><p>如果项目规模较大，涉及多个团队协作，还可以将具有相关业务功能的页面组织在一起，形成一个子系统，进一步将整个站点拆分出多个子系统来分配给不同团队维护，针对这种情况后面我会单开文章详细介绍。</p><p>以上架构设计历经许多不同公司不同业务场景的前端团队验证，收获了不错的口碑，是行之有效的前端工程分治方案。<br><code>吐槽：我本人非常反对某些前端团队将前端开发划分为“JS开发”和“页面重构”两种岗位，更倾向于组件粒度的开发理念，对GUI软件开发的分工规划应该以功能为单位，而不是开发语言；对开发者的技术要求也应该是掌握完整的端内技术。</code></p><h4 id="第二件事：“智能”静态资源管理"><a href="#第二件事：“智能”静态资源管理" class="headerlink" title="第二件事：“智能”静态资源管理"></a>第二件事：“智能”静态资源管理</h4><p>上面提到的模块化/组件化开发，仅仅描述了一种开发理念，也可以认为是一种开发规范，倘若你认可这规范，对它的分治策略产生了共鸣，那我们就可以继续聊聊它的具体实现了。</p><p>很明显，模块化/组件化开发之后，我们最终要解决的，就是模块/组件加载的技术问题。然而前端与客户端GUI软件有一个很大的不同：<br><code>前端是一种远程部署，运行时增量下载的GUI软件</code><br>前端应用没有安装过程，其所需程序资源都部署在远程服务器，用户使用浏览器访问不同的页面来加载不同的资源，随着页面访问的增加，渐进式的将整个程序下载到本地运行，“增量下载”是前端在工程上有别于客户端GUI软件的根本原因。</p><p><img src="https://show8.github.io/blogimage/G14.gif" alt="图14"></p><p>上图展示了一款界面繁多功能丰富的应用，如果采用Web实现，相信也是不小的体量，如果用户第一次访问页面就强制其加载全站静态资源再展示，相信会有很多用户因为失去耐心而流失。根据“增量”的原则，我们应该精心规划每个页面的资源加载策略，使得用户无论访问哪个页面都能按需加载页面所需资源，没访问过的无需加载，访问过的可以缓存复用，最终带来流畅的应用体验。</p><p>这正是Web应用“免安装”的魅力所在。</p><p>由“增量”原则引申出的前端优化技巧几乎成为了性能优化的核心，有加载相关的按需加载、延迟加载、预加载、请求合并等策略；有缓存相关的浏览器缓存利用，缓存更新、缓存共享、非覆盖式发布等方案；还有复杂的BigRender、BigPipe、Quickling、PageCache等技术。这些优化方案无不围绕着如何将增量原则做到极致而展开。</p><p>所以我觉得：<br><code>第四阶段前端开发最迫切需要做好的就是在基础架构中贯彻增量原则。</code><br>相信这种贯彻不会随着时间的推移而改变，在可预见的未来，无论在HTTP1.x还是HTTP2.0时代，无论在ES5亦或者ES6/7时代，无论是AMD/CommonJS/UMD亦或者ES6 module时代，无论端内技术如何变迁，我们都有足够充分的理由要做好前端程序资源的增量加载。</p><p>正如前面说到的，第三阶段前端工程缺少点什么呢？我觉得是在其基础架构中缺少这样一种“智能”的资源加载方案。没有这样的方案，很难将前端应用的规模发展到第四阶段，很难实现落地前面介绍的那种组件化开发方案，也很难让多方合作高效率的完成一项大型应用的开发，并保证其最终运行性能良好。在第四阶段，我们需要强大的工程化手段来管理”玩具般简单“的前端开发。</p><p>在我的印象中，Facebook是这方面探索的伟大先驱之一，早在2010年的<a href="http://velocity.oreilly.com.cn/2010/" target="_blank" rel="external">Velocity</a> China大会上，来自Facebook的David Wei博士就为业界展示了他们令人惊艳的静态网页资源管理和优化技术。</p><p>David Wei博士在当年的交流会上提到过一些关于Facebook的一些产品数据：    </p><ul><li>Facebook整站有10000+个静态资源；</li><li>每个静态资源都有可能被翻译成超过100种语言版本；</li><li>每种资源又会针对浏览器生成3种不同的版本；</li><li>要针对不同带宽的用户做5种不同的打包方法；</li><li>有3、4个不同的用户组，用于小批次体验新的产品功能；</li><li>还要考虑不同的送达方法，可以直接送达，或者通过iframe的方式提升资源并行加载的速度；</li><li>静态资源的压缩和非压缩状态可切换，用于调试和定位线上问题</li></ul><p>这是一个状态爆炸的问题，将所有状态乘起来，整个网站的资源组合方式会达到几百万种之多（去重之后统计大概有300万种组合方式）。支撑这么大规模前端项目运行的底层架构正是魏博士在那次演讲中分享的Static Resource Management System(静态资源管理系统)，用以解决Facebook项目中有关前端工程的3D问题（Development，Deployment，Debugging）。</p><p>那段时间 FIS 项目正好遇到瓶颈，当时的FIS还是一个用php写的task-based构建工具，那时候对于前端工程的认知度很低，觉得前端构建不就是几个压缩优化校验打包任务的组合吗，写好流程调度，就针对不同需求写插件呗，看似非常简单。但当我们支撑越来越多的业务团队，接触到各种不同的业务场景时，我们深刻的感受到task-based工具的粗糙，团队每天疲于根据各种业务场景编写各种打包插件，构建逻辑异常复杂，隐隐看到不可控的迹象。</p><p>我们很快意识到把基础架构放到构建工具中实现是一件很愚蠢的事，试图依靠构建工具实现各种优化策略使得构建变成了一个巨大的黑盒，一旦发生问题，定位起来非常困难，而且每种业务场景都有不同的优化需求，构建工具只能通过静态分析来优化加载，具有很大的局限性，单页面/多页面/PC端/移动端/前端渲染/后端渲染/多语言/多皮肤/高级优化等等资源加载问题，总不能给每个都写一套工具吧，更何况这些问题彼此之间还可以有多种组合应用，工具根本写不过来。</p><p>Facebook的做法无疑为我们亮起了一盏明灯，不过可惜它并不开源（不是技术封锁，而是这个系统依赖FB体系中的其他方面，通用性不强，开源意义不大），我们只能尝试挖掘相关信息，网上对它的完整介绍还是非常非常少，分析facebook的前端代码也没有太多收获，后来无意中发现了facebook使用的项目管理工具phabricator中的一个静态管理方案Celerity，以及相关的说明，看它的描述很像是Facebook静态资源管理系统的一个mini版！</p><p>简单看过整个系统之后发现原理并不复杂（小而美的典范），它是通过一个小工具扫描所有静态资源，生成一张资源表，然后有一个PHP实现的资源管理框架（Celerity）提供了资源加载接口，替代了传统的script/link等静态的资源加载标签，最终通过查表来加载资源。</p><p>虽然没有真正看过FB的那套系统，但眼前的这个小小的框架给了当时的我们足够多的启示：<br><code>静态资源管理系统 = 资源表 + 资源加载框架</code><br>多么优雅的实现啊！</p><p>资源表是一份数据文件（比如JSON），是项目中所有静态资源（主要是JS和CSS）的构建信息记录，通过构建工具扫描项目源码生成，是一种k-v结构的数据，以每个资源的id为key，记录了资源的类别、部署路径、依赖关系、打包合并等内容，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"a.js"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/js/a.5f100fa.js"</span>,</div><div class="line">        <span class="string">"dep"</span>: [ <span class="string">"b.js"</span>, <span class="string">"a.css"</span> ]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"a.css"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/css/a.63cf374.css"</span>,</div><div class="line">        <span class="string">"dep"</span>: [ <span class="string">"button.css"</span> ]</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"b.js"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/js/b.97193bf.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"button.css"</span>: &#123;</div><div class="line">        <span class="string">"url"</span>: <span class="string">"/static/css/button.de33108.css"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而资源加载框架则提供一些资源引用的API，让开发者根据id来引用资源，替代静态的script/link标签来收集、去重、按需加载资源。调用这些接口时，框架通过查表来查找资源的各项信息，并递归查找其依赖的资源的信息，然后我们可以在这个过程中实现各种性能优化算法来“智能”加载资源。</p><p>根据业务场景的不同，加载框架可以在浏览器中用JS实现，也可以是后端模板引擎中用服务端语言实现，甚至二者的组合，不一而足。</p><p><img src="https://show8.github.io/blogimage/G15.png" alt="图15"></p><p><code>有关加载框架的具体实现我曾写过很多文章介绍，可以扩展阅读：</code></p><ul><li><a href="https://github.com/fouber/blog/issues/3" target="_blank" rel="external">前端工程与性能优化</a></li><li><a href="https://github.com/fouber/blog/issues/4" target="_blank" rel="external">前端工程与模块化框架</a></li></ul><p>这种设计很快被验证具有足够的灵活性，能够完美支撑不同团队不同技术规范下的性能优化需求，前面提到的按需加载、延迟加载、预加载、请求合并、文件指纹、CDN部署、Bigpipe、Quickling、BigRender、首屏CSS内嵌、HTTP 2.0服务端推送等等性能优化手段都可以很容易的在这种架构上实现，甚至可以根据性能日志自动进行优化（Facebook已实现）。</p><p>因为有了资源表，我们可以很方便的控制资源加载，通过各种手段在运行时计算页面的资源使用情况，从而获得最佳加载性能。无论是前端渲染的单页面应用，还是后端渲染的多页面应用，这种方法都同样适用。</p><p>此外，它还很巧妙的约束了构建工具的职责——只生成资源表。资源表是非常通用的数据结构，无论什么业务场景，其业务代码最终都可以被扫描为相同结构的表数据，并标记资源间的依赖关系，有了表之后我们只需根据不同的业务场景定制不同的资源加载框架就行了，从此彻底告别一个团队维护一套工具的时代！！！</p><p><img src="https://show8.github.io/blogimage/G16.png" alt="图16"></p><p><code>恩，如你所见，虽然彻底告别了一个团队一套工具的时代，但似乎又进入了一个团队一套框架的时代。其实还是有差别的，因为框架具有很大的灵活性，而且不那么黑盒，采用框架实现资源管理相比构建更容易调试、定位和升级变更。</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p>回顾一下前面提到过的前端工程三个阶段：</p><ul><li>第一阶段：库/框架选型</li><li>第二阶段：简单构建优化</li><li>第三阶段：JS/CSS模块化开发</li></ul><p>现在补充上第四阶段：</p><ul><li>第四阶段：组件化开发与资源管理</li></ul><p>由于先天缺陷，<code>前端相比其他软件开发，在基础架构上更加迫切的需要组件化开发和资源管理，</code>而解决资源管理的方法其实一点也不复杂：<br><code>一个通用的资源表生成工具 + 基于表的资源加载框架</code></p><p>近几年来各种你听到过的各种资源加载优化策略大部分都可以在这样一套基础上实现，而这种优化对于业务来说是完全透明的，不需要重构的性能优化——这不正是我们一直所期盼的吗？正如魏小亮博士所说：我们可以把优秀的人集中起来去优化加载。</p><p>如何选型技术、如何定制规范、如何分治系统、如何优化性能、如何加载资源，当你从切图开始转变为思考这些问题的时候，我想说：</p><p>你好，工程师！</p><p>前端工程其实是一个很大的话题，开发仅是其中的一部分。</p><p>转自：<a href="https://github.com/fouber/blog/blob/master/201508/01.md#" target="_blank" rel="external">https://github.com/fouber/blog/blob/master/201508/01.md#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端工程——基础篇&quot;&gt;&lt;a href=&quot;#前端工程——基础篇&quot; class=&quot;headerlink&quot; title=&quot;前端工程——基础篇&quot;&gt;&lt;/a&gt;前端工程——基础篇&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;喂喂喂，那个切图的，把页面写好就发给研发工程师套模板吧。&lt;br&gt;你好，切图仔。&lt;br&gt;&lt;img src=&quot;https://show8.github.io/blogimage/9-11.jpg&quot; alt=&quot;图0&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端工程" scheme="http://showcc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="三个阶段" scheme="http://showcc.github.io/tags/%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>随手记（问题总结）</title>
    <link href="http://showcc.github.io/2017/07/13/With%20the%20notes/"/>
    <id>http://showcc.github.io/2017/07/13/With the notes/</id>
    <published>2017-07-13T01:38:46.537Z</published>
    <updated>2017-09-22T13:47:10.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结下开发时候随手记的一些东西，以后方便查找"><a href="#总结下开发时候随手记的一些东西，以后方便查找" class="headerlink" title="总结下开发时候随手记的一些东西，以后方便查找"></a>总结下开发时候随手记的一些东西，以后方便查找</h2><hr><p><img src="https://show8.github.io/blogimage/suibi.jpg" alt="图片1"><br><a id="more"></a></p><ol><li>display:table-cell——————display:table-cell属性指让标签元素以表格单元格的形式呈现，类似于td标签。</li><li>tap-highlight-color——————设置或检索对象的轻按时高亮。 当用户轻按一个链接或者JavaScript可点击元素时给元素覆盖一个高亮色 如果想取消这个高亮，将值设置为全透明即可，比如transparent</li><li>-webkit-appearance: none; 去掉ios的input阴影</li><li><p>移动端触摸事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.WL_xinjian'</span>).bind(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="keyword">this</span>).css(<span class="string">'background'</span>,<span class="string">'#d9d9d9'</span>);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">'.WL_xinjian'</span>).bind(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="keyword">this</span>).css(<span class="string">'background'</span>,<span class="string">'#fff'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>手机端的轮播图 初始化switch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//observer: true, //修改swiper自己或子元素时，自动初始化swiper</span></div><div class="line"><span class="comment">//observeParents: true, //修改swiper的父元素时，自动初始化swipe</span></div><div class="line">preventClicks : <span class="literal">false</span>,  <span class="comment">//当swiper在触摸时阻止默认事件（preventDefault），用于防止触摸时触发链接跳转。</span></div><div class="line">preventLinksPropagation : <span class="literal">true</span>,  <span class="comment">//阻止click冒泡。拖动Swiper时阻止click事件。</span></div><div class="line">width : <span class="built_in">window</span>.innerWidth,  </div><div class="line">observer : <span class="literal">true</span>  <span class="comment">//当改变swiper的样式（例如隐藏/显示）或者修改swiper的子元素时，自动初始化swiper</span></div></pre></td></tr></table></figure></li><li><p>微信端图片缩放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>,<span class="string">'img'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">var</span> imgs=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">     <span class="keyword">var</span> nowImgurl=<span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> imgObj=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;imgObj.length; i++)</div><div class="line">      &#123;</div><div class="line">        imgs.push(imgObj[i].src); </div><div class="line">      &#125;</div><div class="line">        nowImgurl = <span class="keyword">this</span>.src;</div><div class="line">          WeixinJSBridge.invoke(<span class="string">"imagePreview"</span>,&#123;</div><div class="line">            <span class="string">"urls"</span>:imgs,</div><div class="line">            <span class="string">"current"</span>:nowImgurl</div><div class="line">            &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>网站设计之常见简单实用的JavaScript特效总结（上篇）— <a href="http://click.aliyun.com/m/16034/" target="_blank" rel="external">http://click.aliyun.com/m/16034/</a><br>【javascript】typeof和instanceof的关系 — <a href="http://click.aliyun.com/m/16032/" target="_blank" rel="external">http://click.aliyun.com/m/16032/</a><br>【JavaScript】js中与变量相关的一些知识 — <a href="http://click.aliyun.com/m/16012/" target="_blank" rel="external">http://click.aliyun.com/m/16012/</a><br>31款轻量高效的开源<em>JavaScript</em>插件和库 — <a href="http://click.aliyun.com/m/16035/" target="_blank" rel="external">http://click.aliyun.com/m/16035/</a></p></li><li><p>HTML5 data-* 自定义属性<br>1.设置方法<br>A.直接在标签内书写，格式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">data-age</span>=<span class="string">"24"</span>&gt;</span></div><div class="line">    Click Here</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">"pagecreate"</span>,<span class="string">"#pageone"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="comment">// jQuery 事件...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>监测上滑下滑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> startX = <span class="number">0</span>,</div><div class="line">        startY = <span class="number">0</span>;</div><div class="line">   <span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    x=event.touches[<span class="number">0</span>].pageX;</div><div class="line">    y=event.touches[<span class="number">0</span>].pageY;</div><div class="line">   startX=x;</div><div class="line">   startY=y;</div><div class="line">   &#125;,<span class="literal">false</span>);</div><div class="line"></div><div class="line">   <span class="built_in">document</span>.addEventListener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">// alert(1)</span></div><div class="line">   x=event.touches[<span class="number">0</span>].pageX;</div><div class="line">   y=event.touches[<span class="number">0</span>].pageY;</div><div class="line">   </div><div class="line">   <span class="keyword">if</span>($(<span class="string">'.content'</span>).scrollTop()&gt;<span class="number">50</span>)</div><div class="line">   <span class="keyword">if</span> (y - startY&gt;<span class="number">0</span>) &#123;</div><div class="line"><span class="comment">//          下滑</span></div><div class="line">$(<span class="string">'.W_jd1_parent'</span>).animate(&#123;<span class="string">'top'</span>:<span class="number">0</span>&#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="string">'.content'</span>).css(<span class="string">'top'</span>,$(<span class="string">'.bar'</span>).height());</div><div class="line">&#125;);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//      上滑</span></div><div class="line">$(<span class="string">'.W_jd1_parent'</span>).animate(&#123;<span class="string">'top'</span>:<span class="number">-100</span>&#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$(<span class="string">'.content'</span>).css(<span class="string">'top'</span>,<span class="number">0</span>);</div><div class="line">&#125;);</div><div class="line">        &#125;</div><div class="line">   &#125;,<span class="literal">false</span>);</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">x=event.touches[<span class="number">0</span>].pageX;</div><div class="line">   y=event.touches[<span class="number">0</span>].pageY;</div><div class="line"><span class="keyword">if</span>($(<span class="string">'.content'</span>).scrollTop()&gt;<span class="number">50</span>)</div><div class="line">   &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>CSS文本超出2行就隐藏并且显示省略号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>; </div><div class="line">        <span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</div><div class="line">        <span class="selector-tag">display</span><span class="selector-pseudo">:-webkit-box</span>; </div><div class="line"><span class="selector-tag">-webkit-box-orient</span><span class="selector-pseudo">:vertical</span>;</div><div class="line"><span class="selector-tag">-webkit-line-clamp</span><span class="selector-pseudo">:2</span>;</div></pre></td></tr></table></figure></li><li><p>不定宽高 让div或者 文字居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</div><div class="line">        <span class="selector-tag">width</span>: 100%;</div><div class="line">        <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</div><div class="line">        <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</div><div class="line"><span class="selector-tag">-webkit-transform</span><span class="selector-pseudo">:translate(-50</span>%,<span class="selector-tag">-50</span>%);</div></pre></td></tr></table></figure></li><li><p>模糊背景</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>); <span class="comment">/* Chrome, Opera */</span></div><div class="line">   <span class="selector-tag">-moz-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</div><div class="line">    <span class="selector-tag">-ms-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);    </div><div class="line">        <span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</div></pre></td></tr></table></figure></li><li><p>span写购物车右上角 圆形 红色的玩意er</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</div><div class="line"><span class="selector-tag">top</span>: <span class="selector-class">.1rem</span>;</div><div class="line"><span class="selector-tag">left</span>: 50%;</div><div class="line"><span class="selector-tag">z-index</span>: 100;</div><div class="line"><span class="selector-tag">min-width</span>: <span class="selector-class">.8rem</span>;</div><div class="line"><span class="selector-tag">height</span>: <span class="selector-class">.8rem</span>;</div><div class="line"><span class="selector-tag">padding</span>: 0 <span class="selector-class">.2rem</span>;</div><div class="line"><span class="selector-tag">margin-left</span>: <span class="selector-class">.1rem</span>;</div><div class="line"><span class="selector-tag">font-size</span>: <span class="selector-class">.6rem</span>;</div><div class="line"><span class="selector-tag">line-height</span>: <span class="selector-class">.8rem</span>;</div><div class="line"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</div><div class="line"><span class="selector-tag">vertical-align</span>: <span class="selector-tag">top</span>;</div><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">red</span>;</div><div class="line"><span class="selector-tag">border-radius</span>: <span class="selector-class">.5rem</span>;</div></pre></td></tr></table></figure></li><li><p>修改placeholder样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-ms-input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-o-input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::input-placeholder</span> &#123;  </div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#7d6856</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>禁止选中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">moz-user-select</span>: <span class="selector-tag">-moz-none</span>;</div><div class="line"><span class="selector-tag">-moz-user-select</span>: <span class="selector-tag">none</span>;</div><div class="line"><span class="selector-tag">-o-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">-khtml-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">-webkit-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">-ms-user-select</span><span class="selector-pseudo">:none</span>;</div><div class="line"><span class="selector-tag">user-select</span><span class="selector-pseudo">:none</span>;</div></pre></td></tr></table></figure></li><li><p>设置或检索对象的轻按时高亮。当用户轻按一个链接或者JavaScript可点击元素时给元素覆盖一个高亮色如果想取消这个高亮，将值设置为全透明即可，比如transparent</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tap-highlight-color</span>：</div><div class="line"><span class="selector-class">.demo1</span> &#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.demo2</span> &#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>live()为动态创建的DOM加事件时候使用,off()取消事件<br>移除所有 </p><p> 元素上的 click 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   $(<span class="string">"p"</span>).off(<span class="string">"click"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7&quot;&gt;</code><br>#以上代码告诉IE浏览器，无论是否用DTD声明文档标准，IE8/9都会以IE7引擎来渲染页面。<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot;&gt;</code><br>#以上代码告诉IE浏览器，IE8/9都会以IE8引擎来渲染页面。<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</code><br>#以上代码告诉IE浏览器，IE8/9及以后的版本都会以最高版本IE来渲染页面。<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7,IE=9&quot;&gt;</code><br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7,9&quot;&gt;</code><br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;&gt;</code><br>#以上代码IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame.</p></li><li><p>object-fit 类似于background-size：cover;  object-position 图片img图片控制大小位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">object-position</span>: 100% 100%;</div><div class="line"><span class="selector-class">.fill</span> &#123; <span class="attribute">object-fit</span>: fill; &#125;</div><div class="line"><span class="selector-class">.contain</span> &#123; <span class="attribute">object-fit</span>: contain; &#125;</div><div class="line"><span class="selector-class">.cover</span> &#123; <span class="attribute">object-fit</span>: cover; &#125;</div><div class="line"><span class="selector-class">.none</span> &#123; <span class="attribute">object-fit</span>: none; &#125;</div><div class="line"><span class="selector-class">.scale-down</span> &#123; <span class="attribute">object-fit</span>: scale-down; &#125;</div></pre></td></tr></table></figure><p>fill: 中文释义“填充”。默认值。替换内容拉伸填满整个content box, 不保证保持原有的比例。<br>contain: 中文释义“包含”。保持原有尺寸比例。保证替换内容尺寸一定可以在容器里面放得下。因此，此参数可能会在容器内留下空白。<br>cover: 中文释义“覆盖”。保持原有尺寸比例。保证替换内容尺寸一定大于容器尺寸，宽度和高度至少有一个和容器一致。因此，此参数可能会让替换内容（如图片）部分区域不可见。<br>none: 中文释义“无”。保持原有尺寸比例。同时保持替换内容原始尺寸大小。<br>scale-down: 中文释义“降低”。就好像依次设置了none或contain, 最终呈现的是尺寸比较小的那个。</p></li><li><p>CSS hack方式一：条件注释法<br>这种方式是IE浏览器专有的Hack方式，微软官方推荐使用的hack方式。举例如下</p><p>只在IE下生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> IE]&gt;</div><div class="line">这段文字只在IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>只在IE6下生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> IE <span class="number">6</span>]&gt;</div><div class="line">这段文字只在IE6浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>只在IE6以上版本生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> gte IE <span class="number">6</span>]&gt;</div><div class="line">这段文字只在IE6以上(包括)版本IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>只在IE8上不生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> ! IE <span class="number">8</span>]&gt;</div><div class="line">这段文字在非IE8浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure><p>非IE浏览器生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> !IE]&gt;</div><div class="line">这段文字只在非IE浏览器显示</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></li><li><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动，当设置为fixed时页面的其余部分滚动时，背景图像不会移动。</p></li><li><p>判断ie6789</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE6.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 6.0"); </span></div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE7.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 7.0"); </span></div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE8.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 8.0"); </span></div><div class="line"> <span class="comment">// alert('您的浏览器版本过低,请升级到IE9.0以上版本或者使用其他浏览器')</span></div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(navigator.appName == <span class="string">"Microsoft Internet Explorer"</span> &amp;&amp; navigator.appVersion .split(<span class="string">";"</span>)[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>,<span class="string">""</span>)==<span class="string">"MSIE9.0"</span>) </div><div class="line">&#123; </div><div class="line"><span class="comment">// alert("IE 9.0"); </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>kbd标签标签定义键盘文本<br>pre 元素可定义预格式化的文本 代码啥格式 输出就是什么格式<br>samp 标签表示一段用户应该对其没有什么其他解释的文本字符。要从正常的上下文抽取这些字符时，通常要用到这个标签。<br>var 标签表示变量的名称，或者由用户提供的值。</p></li><li><p>简单的打字动画效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">@<span class="keyword">keyframes</span> typing &#123; <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span>; &#125; &#125;</span></div><div class="line"><span class="css">@<span class="keyword">keyframes</span> blink-caret &#123; 50% &#123; <span class="attribute">border-color</span>: transparent; &#125; &#125;</span></div><div class="line"><span class="undefined">h1 &#123; </span></div><div class="line"><span class="undefined">font: bold 100%,Consolas;</span></div><div class="line"><span class="css"><span class="comment">/*Consolas是一套固定字符宽度的字型，属无衬线字体*/</span></span></div><div class="line"><span class="undefined">border-right: 2px solid red;</span></div><div class="line"><span class="css"><span class="comment">/*width: 16.5em;*/</span> <span class="comment">/* fallback */</span></span></div><div class="line"><span class="css"><span class="comment">/*width: 30ch;*/</span> <span class="comment">/* # of chars */</span></span></div><div class="line"><span class="css"><span class="comment">/*margin: 2em 1em;*/</span></span></div><div class="line"><span class="css"><span class="comment">/*width: 16.5em英文宽度*/</span></span></div><div class="line"><span class="css"><span class="selector-tag">width</span>: 29<span class="selector-class">.8em</span>;</span></div><div class="line"><span class="css"><span class="comment">/*中文宽度*/</span></span></div><div class="line"><span class="undefined">white-space: nowrap;</span></div><div class="line"><span class="undefined">overflow: hidden;</span></div><div class="line"><span class="css"><span class="selector-tag">animation</span>: <span class="selector-tag">typing</span> 10<span class="selector-tag">s</span> <span class="selector-tag">steps</span>(30, <span class="selector-tag">start</span>),<span class="selector-tag">blink-caret</span> <span class="selector-class">.5s</span> <span class="selector-tag">step-end</span> <span class="selector-tag">infinite</span> <span class="selector-tag">alternate</span>;</span></div><div class="line"><span class="css"><span class="comment">/*steps(30, end) 第一个参数30这个动画分30步执行完 第二个start 第一帧是第一步动画结束此时已经出现一个字了  end 第一帧是第一步动画开始*/</span></span></div><div class="line"><span class="undefined">/*step-start 等同于 steps(10,start) 动画分成10步，动画执行时为开始左侧端点的部分为开始。</span></div><div class="line"><span class="undefined">step-end 等同于 steps(10,end) 动画分成10步，动画执行时以结尾端点为开始，默认值为 end。*/</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>王立战好帅 &amp;nbsp; 阿萨德阿萨德<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($(<span class="string">'.jiji'</span>).eq(index).is(<span class="string">':hide’))&#123;</span></div><div class="line"><span class="string">如果jiji元素此时状态为隐藏</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure></li><li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">width=device-width ：表示宽度是设备屏幕的宽度</div><div class="line">initial-scale=1.0 ：表示初始的缩放比例</div><div class="line">minimum-scale=0.5 ：表示最小的缩放比例</div><div class="line">maximum-scale=2.0 ：表示最大的缩放比例</div><div class="line">user-scalable=yes ：表示用户是否可以调整缩放比例</div></pre></td></tr></table></figure></li><li><p>禁止鼠标右键,f12键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.oncontextmenu=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">&#125; </div><div class="line">$(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">e = <span class="built_in">window</span>.event || e || e.which;</div><div class="line"><span class="keyword">if</span>(e.keyCode==<span class="number">123</span>)&#123;</div><div class="line">location.href=<span class="string">'https://showcc.github.io'</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>HTML5 input标签中的required属性，规定必需在提交之前填写输入字段 提示信息。例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo_form.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">  Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"usr_name"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>鼠标样式cursor：not-allowed，是一个红色的圈加一个斜杠，表示禁止的意思，似乎IE，chrome firefox 都能够正常显示，很好用。</p></li><li><p>实现压缩文件下载rar 直接<code>&lt;a href=&quot;BB.rar&quot;&gt;</code>下载</p></li><li><p>按钮点击时候比较真实的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"HR_nr_right_a1 button_guan"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/W_guanbi.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.HR_nr_right_a1</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">123px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">44px</span>;</div><div class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</div><div class="line"><span class="attribute">display</span>: block;</div><div class="line"><span class="attribute">text-align</span>: center;</div><div class="line"><span class="attribute">line-height</span>: <span class="number">44px</span>;</div><div class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#000000</span>;</div><div class="line"><span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">0</span> auto;</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button_guan</span> &#123;</div><div class="line"><span class="attribute">border</span>: none;</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(255,255,255,1);</div><div class="line"><span class="attribute">text-decoration</span>: none;</div><div class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(219,87,5,1);</div><div class="line"><span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line"><span class="attribute">-webkit-border-radius</span>: <span class="number">8px</span>;</div><div class="line"><span class="attribute">-moz-border-radius</span>: <span class="number">8px</span>;</div><div class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</div><div class="line"><span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">-o-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">-ms-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">9px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(0,0,0,.7);</div><div class="line"><span class="attribute">width</span>: <span class="number">123px</span>;</div><div class="line"><span class="attribute">text-align</span>: center;</div><div class="line"><span class="attribute">-webkit-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">-moz-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">-ms-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">-o-transition</span>: all .<span class="number">1s</span> ease;</div><div class="line"><span class="attribute">transition</span>: all .<span class="number">1s</span> ease;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button_guan</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line"><span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">-o-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">-ms-box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(219,31,5,1), <span class="number">0px</span> <span class="number">3px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.9);</div><div class="line"><span class="attribute">position</span>: relative;</div><div class="line"><span class="attribute">top</span>: <span class="number">6px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>jQuery delay() 方法    设置延迟时间,对不同的div元素设置延迟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#div1"</span>).delay(<span class="string">"slow"</span>).fadeIn();</div><div class="line">    $(<span class="string">"#div2"</span>).delay(<span class="string">"fast"</span>).fadeIn();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>content-box：<br>padding和border不被包含在定义的width和height之内。对象的实际宽度等于设置的width值和border、padding之和，即 ( Element width = width + border + padding )<br>此属性表现为标准模式下的盒模型。<br><code>.test1{ box-sizing:content-box; width:200px; padding:10px; border:15px solid #eee; }</code> 总width250px；<br>border-box：<br>padding和border被包含在定义的width和height之内。对象的实际宽度就等于设置的width值，即使定义有border和padding也不会改变对象的实际宽度，即 ( Element width = width )<br>此属性表现为怪异模式下的盒模型。<br><code>.test2{ box-sizing:border-box; width:200px; padding:10px; border:15px solid #eee; }</code>  总width 200px；</p></li><li><p>三等份布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ul &#123; width: 100%;height: 80px;background: pink;display: flex;//重要 父级设置&#125;</div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line"><span class="attribute">list-style</span>: none;</div><div class="line">flex: 1;//*</div><div class="line"><span class="selector-tag">height</span>: 80<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">line-height</span>: 80<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</div><div class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></li><li><p>判断鼠标从哪个方向进入–jQuery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#wrap"</span>).bind(<span class="string">"mouseenter mouseleave"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> w = $(<span class="keyword">this</span>).width();</div><div class="line">       <span class="keyword">var</span> h = $(<span class="keyword">this</span>).height();</div><div class="line">           <span class="keyword">var</span> x = (e.pageX - <span class="keyword">this</span>.offsetLeft - (w / <span class="number">2</span>)) * (w &gt; h ? (h / w) : <span class="number">1</span>);</div><div class="line">           <span class="keyword">var</span> y = (e.pageY - <span class="keyword">this</span>.offsetTop - (h / <span class="number">2</span>)) * (h &gt; w ? (w / h) : <span class="number">1</span>);</div><div class="line">           <span class="keyword">var</span> direction = <span class="built_in">Math</span>.round((((<span class="built_in">Math</span>.atan2(y, x) * (<span class="number">180</span> / <span class="built_in">Math</span>.PI)) + <span class="number">180</span>) / <span class="number">90</span>) + <span class="number">3</span>) % <span class="number">4</span>; <span class="comment">//direction的值为“0,1,2,3”分别对应着“上，右，下，左”</span></div><div class="line">           <span class="keyword">var</span> eventType = e.type;</div><div class="line">           <span class="keyword">var</span> dirName = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'上方'</span>,<span class="string">'右侧'</span>,<span class="string">'下方'</span>,<span class="string">'左侧'</span>);</div><div class="line">           <span class="keyword">if</span>(e.type == <span class="string">'mouseenter'</span>)&#123;</div><div class="line">              $(<span class="string">"#result"</span>).html(dirName[direction]+<span class="string">'进入'</span>);</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">              $(<span class="string">'#result'</span>).html(dirName[direction]+<span class="string">'离开'</span>);</div><div class="line">          &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; <span class="keyword">if</span>(event.keyCode ==<span class="number">13</span>)&#123;  $(<span class="string">".W-T"</span>).trigger(<span class="string">"click"</span>);&#125;&#125;);<span class="comment">//按enter键提交</span></div><div class="line">$(<span class="string">'.W-T'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;....&#125;);</div></pre></td></tr></table></figure></li><li><p>js随机显示图片  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> images=[<span class="string">'p1.jpg'</span>,<span class="string">'p2.jpg'</span>,<span class="string">'p3.jpg'</span>];</div><div class="line"><span class="keyword">var</span> url=images[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*images.length)];</div><div class="line"><span class="built_in">console</span>.log(url);</div></pre></td></tr></table></figure></li><li><p>jq获取url </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xx = getUrlParam(<span class="string">'reurl'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);<span class="comment">//构造一个含有目标参数的正则表达式对象</span></div><div class="line">    <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);<span class="comment">//匹配目标参数</span></div><div class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;<span class="comment">//返回参数值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>左侧定宽，右侧自适应<br>第一种：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.two</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.two</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>禁止滚动条(ios好像不能用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.body).css(&#123;</div><div class="line"> <span class="string">"overflow-x"</span>:<span class="string">"hidden"</span>,</div><div class="line"> <span class="string">"overflow-y"</span>:<span class="string">"hidden"</span></div><div class="line"> &#125;);</div><div class="line">$(<span class="built_in">document</span>.body).css(&#123;</div><div class="line"><span class="string">"overflow-x"</span>:<span class="string">"auto"</span>,</div><div class="line"> <span class="string">"overflow-y"</span>:<span class="string">"auto"</span></div><div class="line"> &#125;);</div></pre></td></tr></table></figure></li><li><p>用户访问页面的次数进行计数：在localStorage 本地查看,刷新页面会看到计数器在增长。关闭浏览器窗口，然后再试一次，计数器会继续计数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (localStorage.pagecount)</div><div class="line">&#123;</div><div class="line">localStorage.pagecount=<span class="built_in">Number</span>(localStorage.pagecount) +<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">localStorage.pagecount=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"Visits: "</span> + localStorage.pagecount + <span class="string">" time(s)."</span>);</div></pre></td></tr></table></figure></li><li><p>获取滚动条滚动距离 <code>$(window).scrollTop()</code>设置<code>$(window).scrollTop(100)</code>。点击导航 滚动条滚动到页面某个位置<br>1.获取终点元素的<code>var top = $(&#39;.Ws-me&#39;).find(&#39;.Ws-me-title&#39;).offset().top</code>, 距离document顶部的距离<br>2.然后点击导航    让body,html的scrollTop为top</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body,html'</span>).animate(&#123;</div><div class="line">scrollTop: top</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>浏览到某个位置，调用某个动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该调用元素的offset().top值-$(window).scrollTop()=$(window).height();</span></div><div class="line"><span class="keyword">if</span>($(obj).offset().top-$(<span class="built_in">window</span>).scrollTop()&lt;$(<span class="built_in">window</span>).height()<span class="number">-50</span>)&#123;<span class="comment">//当元素滚动到离底部50px的后触发&#125;</span></div></pre></td></tr></table></figure></li><li><p>$(‘#btn’).unbind(“click”);这句代码的作用就是取消元素btn下的click事件。如果没有规定参数，unbind() 方法会删除指定元素的所有事件处理程序。</p></li><li>jQuery为DOM动态追加事件的方法<br>最初是这样写的<br>$(“.btn-open”).on(“click”, function () {  alert($(this).text()); })<br>当然这样是不起作用的，因为在document reday后，.btn-open 这个元素根本还不存在呢，列表没绑定，事件当然也帮不上的！<br>然后是这样的：<br>$(“.table”).on(“click”, “.btn-open”, function () {alert($(this).text());})<br>代码可以看得明白，找到.table 元素，给.btn-open 追加 click事件。</li><li><p>keys_jg是数组 keys1_obj是json数组,往json数组中添加多个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> keys_jg)&#123;</div><div class="line"><span class="keyword">var</span> name1 = keys_jg[i];</div><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:name1,<span class="attr">shu</span>:<span class="string">""</span>,<span class="attr">a</span>:<span class="number">1</span>&#125;;</div><div class="line">keys1_obj.push(person);&#125;</div></pre></td></tr></table></figure></li><li><p>json数据 删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">Array</span>.prototype.removeByValue = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>[i] == val) &#123;</div><div class="line">      <span class="keyword">this</span>.splice(i, <span class="number">1</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a=[</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"111"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"222"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"333"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"444"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"555"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"666"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"777"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"888"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"999"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"1010"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"1111"</span>&#125;,</div><div class="line">&#123;<span class="string">"name"</span>:<span class="string">"1212"</span>&#125;,</div><div class="line">];</div><div class="line"></div><div class="line">$(<span class="string">"ul li"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> text3=&#123;<span class="string">"name"</span>:$(<span class="keyword">this</span>).text()&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line"><span class="keyword">var</span> az=a[i];</div><div class="line"><span class="keyword">if</span>(<span class="built_in">JSON</span>.stringify(az)==<span class="built_in">JSON</span>.stringify(text3))&#123;</div><div class="line"><span class="comment">//delete a[i].name;</span></div><div class="line">a.splice(i,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(text3);</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//console.log(a);</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>$.each()函数:<br>$.each()函数不同于JQuery对象的each()方法，它是一个全局函数，不操作JQuery对象，而是以一个数组或者对象作为第1个参数，以一个回调函数作为第2个参数。回调函数拥有两个参数：第1个为对象的成员或数组的索引，第2个为对应变量或内容。</p></li><li><p>取消当图片src为空的时候，默认是有边框的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span><span class="selector-attr">[src=""]</span>&#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span><span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>display:flex,box-sizing:border-box;边框设置包括宽。box-sizing:conent-box;<br><div><img src="....."></div> div设置百分百 设置border ，图片百分百 此时图片 下面留白 只需要 让 div line-height=0;就行了（替换元素-非替换元素）。</p></li><li><p><a href="http://api.houzhi.net.cn/css/color" target="_blank" rel="external">元素随机变色—直接link引入</a><br><a href="http://api.houzhi.net.cn/img/index/640x480/000/f00/banner" target="_blank" rel="external">测试图片 大小/前景色/字体颜色/名字</a>      </p></li><li><p>让ul li 在box中 随浏览器缩小 li始终居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">*&#123;</span></div><div class="line"><span class="undefined">padding: 0;</span></div><div class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></div><div class="line"><span class="undefined">width: 80%;</span></div><div class="line"><span class="undefined">height: 500px;</span></div><div class="line"><span class="undefined">background: pink;</span></div><div class="line"><span class="undefined">margin: 20px auto;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">ul&gt;li&#123;</span></div><div class="line"><span class="undefined">list-style: none;</span></div><div class="line"><span class="undefined">width: 80px;</span></div><div class="line"><span class="undefined">height: 80px;</span></div><div class="line"><span class="css"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:50</span>%;</span></div><div class="line"><span class="undefined">text-align: center;</span></div><div class="line"><span class="undefined">line-height: 80px;</span></div><div class="line"><span class="css"><span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#444</span>;</span></div><div class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span> 5<span class="selector-tag">px</span> 0 5<span class="selector-tag">px</span>;</span></div><div class="line"><span class="undefined">display: inline-block;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">ul&#123;</span></div><div class="line"><span class="undefined">text-align: center;</span></div><div class="line"><span class="undefined">overflow: hidden;</span></div><div class="line"><span class="undefined">width: 100%;</span></div><div class="line"><span class="undefined">height: 100%;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>jq动态创建dom </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html=<span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> o=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = o.length<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</div><div class="line">html += <span class="string">"&lt;li&gt;"</span>+o[i]+<span class="string">"&lt;/li&gt;"</span>;</div><div class="line">$(<span class="string">'ul'</span>).html(html);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总结下开发时候随手记的一些东西，以后方便查找&quot;&gt;&lt;a href=&quot;#总结下开发时候随手记的一些东西，以后方便查找&quot; class=&quot;headerlink&quot; title=&quot;总结下开发时候随手记的一些东西，以后方便查找&quot;&gt;&lt;/a&gt;总结下开发时候随手记的一些东西，以后方便查找&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://show8.github.io/blogimage/suibi.jpg&quot; alt=&quot;图片1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随手记" scheme="http://showcc.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="问题总结" scheme="http://showcc.github.io/tags/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>毕业季</title>
    <link href="http://showcc.github.io/2017/06/25/Graduation%20season/"/>
    <id>http://showcc.github.io/2017/06/25/Graduation season/</id>
    <published>2017-06-25T08:37:59.058Z</published>
    <updated>2017-07-13T01:51:35.242Z</updated>
    
    <content type="html"><![CDATA[<p>时光匆匆，当我伸手去拦时，它却如微风般悄悄地从指边溜掉了。<br>我的大学生活就如这流水般缓缓而又匆匆地流淌着到了她的尽头，留给我的，是无尽的感慨收获和即将入海的宽广无限。<br><img src="https://show8.github.io/blogimage/by1.jpg" alt="图1"><br><a id="more"></a><br>毕业季节，愿我们的友谊永远不散。<br>再深情望一眼，曾经充满回忆的校园。<br>回忆终是回忆,到最后发现什么都不会有</p><p><img src="https://show8.github.io/blogimage/by2.jpg" alt="图2"></p><p>曲终人散,唱不出世间温暖;诩诩文字,写不尽心中悲喜!<br>毕业了，满足是最真实的财富。贪婪是最真实的贫穷<br>毕业了，在那校园里面还残留着我们多少身影，还有多少回忆，而我们却要离开<br>三年的记忆，忘了吧。只为会笑的明天，不带走任何牵连、一点思念。只是不想流泪</p><p><img src="https://show8.github.io/blogimage/by4.jpg" alt="图3"></p><p>毕业了，青春在无形之中离去，我们即将翻开人生的另一页。<br>毕业了，全心全意却是一生一世。海誓山盟只是一时敷衍。</p><p><img src="https://show8.github.io/blogimage/by5.jpg" alt="图4"></p><p>在这个初夏。别了母校，别了朋友，别了敬爱的老师。一切来的太快了，我们甚至还没做好准备，已经毕业了，在几年的生涯中有快乐、悲伤的事还来不及回忆，一切结束了。<br>毕业了，也许还会怀念寝室卧谈会那轻松，愉悦的感觉。<br>朋友别哭 我依然是你心灵的归宿。未来我们一起加油。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光匆匆，当我伸手去拦时，它却如微风般悄悄地从指边溜掉了。&lt;br&gt;我的大学生活就如这流水般缓缓而又匆匆地流淌着到了她的尽头，留给我的，是无尽的感慨收获和即将入海的宽广无限。&lt;br&gt;&lt;img src=&quot;https://show8.github.io/blogimage/by1.jpg&quot; alt=&quot;图1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://showcc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="毕业" scheme="http://showcc.github.io/tags/%E6%AF%95%E4%B8%9A/"/>
    
      <category term="2017.06.17" scheme="http://showcc.github.io/tags/2017-06-17/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo，换了电脑怎么更新博客？</title>
    <link href="http://showcc.github.io/2017/06/08/Change%20the%20computer%20update%20the%20hexo%20blog/"/>
    <id>http://showcc.github.io/2017/06/08/Change the computer update the hexo blog/</id>
    <published>2017-06-08T12:30:14.850Z</published>
    <updated>2017-07-13T04:04:45.581Z</updated>
    
    <content type="html"><![CDATA[<p>由于我的博客是在公司电脑上搭建的，一旦离开公司电脑在自己的电脑上更新博客，就要重新配置，到底该怎么配置呢？于是我在网上搜了一番，写下这篇博客，总结一下。</p><h3 id="安装-Git，安装Node-js"><a href="#安装-Git，安装Node-js" class="headerlink" title="安装 Git，安装Node.js"></a>安装 Git，安装Node.js</h3><p>首先肯定要先安装Git、Node.js,下面是下载的地址。</p><ol><li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><a id="more"></a></li></ol><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>安装完Git要设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot;</div><div class="line">$ git config --global user.email &quot;username@example.com&quot;</div></pre></td></tr></table></figure></p><h3 id="与github建立联系-设置SSH-keys"><a href="#与github建立联系-设置SSH-keys" class="headerlink" title="与github建立联系-设置SSH keys"></a>与github建立联系-设置SSH keys</h3><p>输入以下指令（邮箱就是你注册Github时候的邮箱）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;show_wlz@163.com&quot;</div></pre></td></tr></table></figure></p><p>之后一路回车即可。</p><p>完成后，会在用户主目录下生成.ssh目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH key密钥对，<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥。打开文件中<code>id_rsa.pub</code>直接复制其内容：</p><p><img src="https://show8.github.io/blogimage/hexo5.png" alt="图1"></p><p>接着，在GitHub右上方点击头像，选择<code>Settings</code>，在右边的<code>Personal settings</code>侧边栏选择<code>SSH and GPG Keys</code>。接着选择SSH keys右边的<code>New SSH key</code>,其中Title随便写，然后粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p><p>这时候可能会看到有警告，没事，输入“yes”就好</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在电脑桌面任意位置点击鼠标右键，选择Git Base。输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p><p>命令中-g是指全局安装hexo。</p><h3 id="文件夹拷贝"><a href="#文件夹拷贝" class="headerlink" title="文件夹拷贝"></a>文件夹拷贝</h3><p>安装好后，下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。</p><ol><li>讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置<code>_config.yml</code>，<code>theme文件夹里面的主题</code>，以及<code>source里面自己写的博客文件</code>，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是<code>scaffolds文件夹</code>（文章的模板）、<code>package.json</code>（说明使用哪些包）和<code>.gitignore</code>（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。<br>总结:<code>_config.yml</code>，<code>theme/</code>，<code>source/</code>，<code>scaffolds/</code>，<code>package.json</code>，<code>.gitignore</code>，是需要拷贝的。</li><li>再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是<code>.git文件</code>，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹<code>node_modules</code>（在用npm install会重新生成），<code>public</code>（这个在用hexo g时会重新生成），<code>.deploy_git文件夹</code>（在使用hexo d时也会重新生成），<code>db.json文件</code>。其实上面这些文件也就是是.gitignore文件里面记载的可以忽略的内容。<br>总结：<code>.git/</code>，<code>node_modules/</code>，<code>public/</code>，<code>.deploy_git/</code>，<code>db.json文件</code>需要删除。</li></ol><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><p>在新拷贝的文件夹里，右键选择<code>git bash</code>，使用 <code>npm install</code> 命令，进行模块安装。<br>这里不要使用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo      init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><h3 id="安装一些必要组件"><a href="#安装一些必要组件" class="headerlink" title="安装一些必要组件"></a>安装一些必要组件</h3><p>如果在node_modules里面有的，就不要重复安装了：</p><ol><li><p>为了使用hexo d来部署到git上，需要安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></li><li><p>为了建立RSS订阅，需要安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure></li><li><p>为了建立站点地图，需要安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure></li></ol><p>最后输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><p>如果没有出错，恭喜你转移成功！！</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>hexo支持更加简单的命令格式了，比如：</p><ul><li>hexo g == hexo generate</li><li>hexo d == hexo deploy</li><li>hexo s == hexo server</li><li>hexo n == hexo new</li></ul><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>非常感谢您花时间阅读我的博客，希望对您有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于我的博客是在公司电脑上搭建的，一旦离开公司电脑在自己的电脑上更新博客，就要重新配置，到底该怎么配置呢？于是我在网上搜了一番，写下这篇博客，总结一下。&lt;/p&gt;
&lt;h3 id=&quot;安装-Git，安装Node-js&quot;&gt;&lt;a href=&quot;#安装-Git，安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装 Git，安装Node.js&quot;&gt;&lt;/a&gt;安装 Git，安装Node.js&lt;/h3&gt;&lt;p&gt;首先肯定要先安装Git、Node.js,下面是下载的地址。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://showcc.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://showcc.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://showcc.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github pages + Hexo 博客 spfk 主题使用LiveRe评论系统</title>
    <link href="http://showcc.github.io/2017/05/28/Hexo-spfk-LiveRe/"/>
    <id>http://showcc.github.io/2017/05/28/Hexo-spfk-LiveRe/</id>
    <published>2017-05-28T01:24:28.409Z</published>
    <updated>2017-06-11T01:42:07.483Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要用Github Page搭建博客，借用<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">阮一峰</a>的话说，喜欢写Blog的人，会经历三个阶段:</p><ul><li>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</li><li>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</li><li>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</li></ul><p>哈哈 我目前就处于第一阶段，捣鼓着玩的，整个搭建过程都是照着网上做的，期间也遇到了些问题。第一次接触 <code>GitHub</code>， <code>Github</code>是一个全世界程序员聚集的地方，大家相互分享自己写的代码，提升别人，也提升自己。<br>本文主要是对使用GitHub Pages和Hexo搭建独立博客的一些总结。如果是小白的话，可以先花时间去了解下：<br><a id="more"></a></p><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a> </li><li><a href="https://github.com/" target="_blank" rel="external">GitHub</a></li><li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></li><li><a href="http://www.appinn.com/markdown/#autoescape" target="_blank" rel="external">Markdown</a></li></ul><h3 id="创建对应仓库"><a href="#创建对应仓库" class="headerlink" title="创建对应仓库"></a>创建对应仓库</h3><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的账号名)。在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。<br>简单来说，User Pages 与 Project Pages的区别是：</p><ol><li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li><li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li><li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li><li>User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。</li></ol><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><ul><li><a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics / User, Organization, and Project Pages</a></li></ul><h3 id="安装-Git，安装Node-js"><a href="#安装-Git，安装Node-js" class="headerlink" title="安装 Git，安装Node.js"></a>安装 Git，安装Node.js</h3><ol><li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li></ol><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>安装完Git要设置用户名称和邮件地址。这样做很重要，因为每一个Git的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot;</div><div class="line">$ git config --global user.email &quot;username@example.com&quot;</div></pre></td></tr></table></figure></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在电脑桌面任意位置点击鼠标右键，选择Git Base。输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p><p>命令中-g是指全局安装hexo。</p><p>安装完成后，在你喜爱的文件夹下（如C:\Hexo），在C:\Hexo内点击鼠标右键，选择Git Bash，执行以下指令，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p><p>接下来是安装依赖包,接着输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p><p>现在我们已经搭建起本地的hexo博客了，执行以下命令(在C:\Hexo)，然后到浏览器输入localhost:4000进行本地查看。这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>到你刚刚创建对应仓库下，点击绿色按钮clone or download，找到以下内容：</p><p><img src="https://show8.github.io/blogimage/hexo2.jpg" alt="配置文件图1"></p><p>复制里面的地址。然后编辑_config.yml文件（在C:\Hexo下）。</p><p><img src="https://show8.github.io/blogimage/hexo3.png" alt="配置文件图2"></p><p>修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件。</p><p><img src="https://show8.github.io/blogimage/hexo1.png" alt="配置文件图3"></p><h3 id="与github建立联系-设置SSH-keys"><a href="#与github建立联系-设置SSH-keys" class="headerlink" title="与github建立联系-设置SSH keys"></a>与github建立联系-设置SSH keys</h3><p>为了能够在本地使用git管理github上的项目，需要进行一些配置，我用的是SSH的方法。在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al ~/.ssh</div></pre></td></tr></table></figure></p><p>如果不存在没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件</p><p><img src="https://show8.github.io/blogimage/hexo4.png" alt="配置文件图4"></p><p>输入以下指令（邮箱就是你注册Github时候的邮箱）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;show_wlz@163.com&quot;</div></pre></td></tr></table></figure></p><p>之后一路回车即可。</p><p>然后键入以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-agent -s</div></pre></td></tr></table></figure></p><p>继续输入指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>输入之后，在我这里是出错了，不知道你的有没有出错。<br>如果你的也是这样子出错了的话，就输入以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eval `ssh-agent -s`</div><div class="line">ssh-add</div></pre></td></tr></table></figure></p><p>其中“`”是<code>esc</code>键下面的。别按错喽！（我错过/(ㄒoㄒ)/~~）</p><p>到了这一步，就可以添加SSH key到你的Github账户了。输入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p><p>当然你也可以打开文件直接复制其内容（下图中文件就是刚刚拷贝的Key）：</p><p><img src="https://show8.github.io/blogimage/hexo5.png" alt="配置文件图5"></p><p>然后，在GitHub右上方点击头像，选择<code>Settings</code>，在右边的<code>Personal settings</code>侧边栏选择<code>SSH and GPG Keys</code>。接着选择SSH keys右边的<code>New SSH key</code>,其中Title随便写，然后粘贴key，点击”Add key”按钮。最后，测试链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p><p>这时候可能会看到有警告，没事，输入“yes”就好。</p><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p><p>最后一步，快要成功了，输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><p>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）：</p><p><a href="https://showcc.github.io/">https://showcc.github.io/</a></p><h3 id="安装spfk主题"><a href="#安装spfk主题" class="headerlink" title="安装spfk主题"></a>安装spfk主题</h3><p>在hexo文件夹（C:\Hexo）内点击鼠标右键，选择Git Bash，执行以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div></pre></td></tr></table></figure></p><p>接着修改hexo根目录下的配置文件 <code>_config.yml</code> 的theme属性即 <code>theme: spfk</code>。其他的主题也类似操作。<br>然后进行更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd themes/spfk</div><div class="line">git pull</div></pre></td></tr></table></figure></p><p>最后输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><h3 id="添加来必力评论"><a href="#添加来必力评论" class="headerlink" title="添加来必力评论"></a>添加来必力评论</h3><p>首先进入<a href="https://livere.com/" target="_blank" rel="external">来必力</a>网站进行注册，注册完后，点击导航中的<code>安装</code>，选择<code>City版是一款适合所有人使用的免费版本。</code>点击<code>现在安装</code>,接下来根据自身需要进行一些设置，绑定需要添加来必力评论的网址。并获取代码。<br>打开文件夹<code>hexo\themes\spfk\layout\_partial\comments</code>添加一个文件，这里我命名为<code>livere.ejs</code>，把来必力获取的代码拷贝进去。</p><p><img src="https://show8.github.io/blogimage/hexo7.png" alt="添加来必力评论图1"></p><p>由于本主题默认是没有来必力评论的，所以要自己进行添加。<br>打开文件夹<code>hexo\themes\spfk\layout\_partial</code>下的<code>article.ejs</code>文件。</p><p><img src="https://show8.github.io/blogimage/hexo8.png" alt="添加来必力评论图2"></p><p>添加以下内容：</p><p><img src="https://show8.github.io/blogimage/hexo6.png" alt="添加来必力评论图3"></p><p>打开spfk主题配置文件<code>hexo\themes\spfk</code>下的<code>_config.yml</code>添加<code>livere_uid:xxxxxx</code>。</p><p><img src="https://show8.github.io/blogimage/hexo9.png" alt="添加来必力评论图4"></p><p>其中的值为来必力获取代码中的<code>data-uid</code>值。</p><p><img src="https://show8.github.io/blogimage/hexo9.png" alt="添加来必力评论图5"></p><p>最后输入以下指令部署到GitHub上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p><p>OK，来必力评论添加完成，输入网址试试！</p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>hexo支持更加简单的命令格式了，比如：</p><ul><li>hexo g == hexo generate</li><li>hexo d == hexo deploy</li><li>hexo s == hexo server</li><li>hexo n == hexo new</li></ul><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>非常感谢您花时间阅读我的博客，希望对您有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么要用Github Page搭建博客，借用&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰&lt;/a&gt;的话说，喜欢写Blog的人，会经历三个阶段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。&lt;/li&gt;
&lt;li&gt;第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。&lt;/li&gt;
&lt;li&gt;第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈哈 我目前就处于第一阶段，捣鼓着玩的，整个搭建过程都是照着网上做的，期间也遇到了些问题。第一次接触 &lt;code&gt;GitHub&lt;/code&gt;， &lt;code&gt;Github&lt;/code&gt;是一个全世界程序员聚集的地方，大家相互分享自己写的代码，提升别人，也提升自己。&lt;br&gt;本文主要是对使用GitHub Pages和Hexo搭建独立博客的一些总结。如果是小白的话，可以先花时间去了解下：&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://showcc.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="http://showcc.github.io/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://showcc.github.io/tags/Hexo/"/>
    
      <category term="spfk" scheme="http://showcc.github.io/tags/spfk/"/>
    
      <category term="LiveRe" scheme="http://showcc.github.io/tags/LiveRe/"/>
    
  </entry>
  
  <entry>
    <title>燕诗示刘叟</title>
    <link href="http://showcc.github.io/2017/05/14/Mother&#39;s%20Day/"/>
    <id>http://showcc.github.io/2017/05/14/Mother&#39;s Day/</id>
    <published>2017-05-14T10:38:35.893Z</published>
    <updated>2017-05-28T09:39:54.643Z</updated>
    
    <content type="html"><![CDATA[<p>A mother’s love is like a circle. It has no begining and no ending.<br><a id="more"></a><br><img src="https://show8.github.io/blogimage/mother.jpg" alt="hello"></p><p>梁上有双燕，翩翩雄与雌。</p><p>衔泥两椽间，一巢生四儿。</p><p>四儿日夜长，索食声孜孜。</p><p>青虫不易捕，黄口无饱期。</p><p>觜爪虽欲敝，心力不知疲。</p><p>须臾十来往，犹恐巢中饥。</p><p>辛勤三十日，母瘦雏渐肥。</p><p>喃喃教言语，一一刷毛衣。</p><p>一旦羽翼成，引上庭树枝。</p><p>举翅不回顾，随风四散飞。</p><p>雌雄空中鸣，声尽呼不归。</p><p>却入空巢里，啁啾终夜悲。</p><p>燕燕尔勿悲，尔当返自思。</p><p>思尔为雏日，高飞背母时。</p><p>当时父母念，今日尔应知。</p><p>祝愿天下所有的父母，平安健康 幸福一生！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A mother’s love is like a circle. It has no begining and no ending.&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://showcc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="母亲节" scheme="http://showcc.github.io/tags/%E6%AF%8D%E4%BA%B2%E8%8A%82/"/>
    
      <category term="诗词" scheme="http://showcc.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>生活</title>
    <link href="http://showcc.github.io/2017/05/10/Life%20emotion/"/>
    <id>http://showcc.github.io/2017/05/10/Life emotion/</id>
    <published>2017-05-10T03:03:04.176Z</published>
    <updated>2017-05-28T09:40:00.614Z</updated>
    
    <content type="html"><![CDATA[<p>Life doesn’t get easier, you just get stronger.</p><p>具体也不知道在这里呆了多久</p><p>有开心也有难过</p><p>有时以为明天会更好，早晨推开窗，发现淅淅沥沥在下着小雨。<br><a id="more"></a><br><img src="https://show8.github.io/blogimage/Life.jpg" alt="hello"></p><p>最初</p><p>亲人不在身边</p><p>没有朋友</p><p>没人做伴</p><p>兴许习惯了，兴许并不晓得孤单是种什么感觉</p><p>后来</p><p>认识了新朋友</p><p>有人一起逛街，一起吃饭，一起玩耍，</p><p>会一起 分享快乐，抚平悲伤，无言时给你一个拥抱。</p><p>也许青春就该吵吵闹闹</p><p>过了很久</p><p>大家都要考虑去留的问题</p><p>有人回家嫁人相夫教子</p><p>有人离家许久，思乡心切，决定回家</p><p>也有人徘徊许久，不知所措</p><p>我们来自五湖四海</p><p>就此一别</p><p>再见太难</p><p>小小的我们，在这个世界上微乎其微</p><p>想到这，就难免心情低落</p><p>也许有人会说你太感性</p><p>这本是正常的事情</p><p>不必为此伤神</p><p>可你任何事都那么理性 的话，你也太不可爱了</p><p>如今</p><p>一切尚好</p><p>有人会走，有人会来</p><p>陪你的人很多，不知是不是你想要的那个</p><p>开心也好，不开心也罢</p><p>一天二十四小时</p><p>多相识一秒，你在我心中就多一份重量</p><p>不知以后会如何</p><p>目前应该还算不错的吧</p><p>太远的事情就不愿意去思考那么多了</p><p>总之</p><p>认真，你就输了</p><p>除非你一直认真下去</p><p>闲扯颇多，文笔太差，见谅见谅！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Life doesn’t get easier, you just get stronger.&lt;/p&gt;
&lt;p&gt;具体也不知道在这里呆了多久&lt;/p&gt;
&lt;p&gt;有开心也有难过&lt;/p&gt;
&lt;p&gt;有时以为明天会更好，早晨推开窗，发现淅淅沥沥在下着小雨。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://showcc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="雨" scheme="http://showcc.github.io/tags/%E9%9B%A8/"/>
    
      <category term="生活" scheme="http://showcc.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
